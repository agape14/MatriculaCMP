@using MatriculaCMP.Client.Layout
@using MatriculaCMP.Client.Services
@using MatriculaCMP.Shared
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using Microsoft.JSInterop
@inject IJSRuntime JS


@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http


<!-- Sidebar Brand/Logo -->
<div class="sidebar-brand">
    <a class="navbar-brand" href="/home">
        <i class="ri-building-2-line me-2"></i>
        MatriculaCMP
    </a>
</div>

<div class="nav-scrollable">
    <nav class="flex-column">
        <!-- Inicio fijo -->
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/home" Match="NavLinkMatch.All">
                <i class="ri-home-line" aria-hidden="true"></i> Inicio
            </NavLink>
        </div>

        @if (menusAgrupados?.Count > 0)
        {
            @foreach (var kvp in menusAgrupados.OrderBy(k => k.Value.MinId))
            {
                <div class="nav-item px-3 text-info">
                    <i class="@(string.IsNullOrWhiteSpace(kvp.Value.ModuloIcono) ? ObtenerIconoPorDefecto(kvp.Key) : kvp.Value.ModuloIcono) me-2"></i><strong>@kvp.Key</strong>
                </div>
                @foreach (var m in kvp.Value.Items.OrderBy(i => i.Orden ?? int.MaxValue).ThenBy(i => i.Id))
                {
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="@m.Ruta">
                            <i class="@m.Icono"></i> @m.Titulo
                        </NavLink>
                    </div>
                }
            }
        }
    </nav>
</div>
@code {
    //private List<MenuDto> menus = new();
    private string perfilUsuario = "";
    private record GrupoMenu(string? ModuloIcono, List<Menu> Items, int MinId);
    private Dictionary<string, GrupoMenu> menusAgrupados = new();
    private DotNetObjectReference<NavMenu>? _dotNetRef;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated ?? false)
            {
                perfilUsuario = user.FindFirst("PerfilId")?.Value ?? "1";
                Console.WriteLine($"Perfil de usuario cargado: {perfilUsuario}");
                await CargarMenus();
            }
            else
            {
                Console.WriteLine("Usuario no autenticado");
                perfilUsuario = "1"; // Default fallback
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error cargando perfil de usuario: {ex.Message}");
            perfilUsuario = "1"; // Default fallback
        }
        // Suscribirse a cambios para auto-refresco inter-páginas (simple)
        try
        {
            await JS.InvokeVoidAsync("eval", @"(function(){
                if (window.__cmpNavMenuListener) return;
                window.__cmpNavMenuListener = true;
                window.addEventListener('storage', function(e){
                    if (e && e.key === 'cmp-refresh-nav') {
                        // Señal de refresco de menú
                        DotNet.invokeMethodAsync('MatriculaCMP.Client', 'Dummy');
                    }
                });
            })();");
        }
        catch {}
    }

    private async Task CargarMenus()
    {
        try
        {
            var perfilId = int.TryParse(perfilUsuario, out var pid) ? pid : 0;
            if (perfilId <= 0) return;
            var menus = await Http.GetFromJsonAsync<List<Menu>>($"api/menu/por-perfil/{perfilId}") ?? new List<Menu>();
            menusAgrupados = menus
                .GroupBy(m => string.IsNullOrWhiteSpace(m.Modulo) ? "General" : m.Modulo)
                .ToDictionary(
                    g => g.Key,
                    g => new GrupoMenu(
                        g.FirstOrDefault(m => !string.IsNullOrWhiteSpace(m.ModuloIcono))?.ModuloIcono,
                        g.OrderBy(x => x.Titulo).ToList(),
                        g.Min(x => x.Id)
                    )
                );
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error cargando menús dinámicos: {ex.Message}");
        }
    }

    private string ObtenerIconoPorDefecto(string modulo)
    {
        var key = (modulo ?? "").Trim().ToUpperInvariant();
        return key switch
        {
            "CR" or "CONSEJO REGIONAL" => "ri-government-line",
            "SG" or "SECRETARIA GENERAL" or "SECRETARÍA GENERAL" => "ri-shield-star-line",
            "OM" or "OFICINA MATRICULA" or "OFICINA MATRÍCULA" => "ri-building-line",
            "DECANATO" => "ri-award-line",
            "ADMIN" or "ADMINISTRACION" or "ADMINISTRACIÓN" or "ADMINISTRADOR" => "ri-settings-3-line",
            _ => "ri-folder-2-line"
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dotNetRef = DotNetObjectReference.Create(this);
            try
            {
                await JS.InvokeVoidAsync("eval", @"(function(){
                    window.cmpRegisterNav = function(dotnet){
                        if (window.__cmpNavMenuListener) return;
                        window.__cmpNavMenuListener = true;
                        window.addEventListener('storage', function(e){
                            if (e && e.key === 'cmp-refresh-nav') {
                                try{ dotnet.invokeMethodAsync('RefreshMenus'); }catch(_){ }
                            }
                        });
                    }
                })();");
                await JS.InvokeVoidAsync("cmpRegisterNav", _dotNetRef);
            }
            catch { }
        }
    }

    [JSInvokable]
    public async Task RefreshMenus()
    {
        await CargarMenus();
    }

    public void Dispose()
    {
        _dotNetRef?.Dispose();
    }
}