@page "/consejoregional/firmar-diplomas"
@using MatriculaCMP.Shared
@using static MatriculaCMP.Shared.FirmaDigitalDTO
@inject IJSRuntime JS
@inject HttpClient Http


<div class="container-fluid">
    @if (iniciandoFirma)
    {
        <div style="position:fixed;inset:0;background:rgba(0,0,0,0.55);z-index: 1000;display:flex;align-items:center;justify-content:center;color:#fff;">
            <div style="text-align:center">
                <div class="spinner-border text-light" role="status"></div>
                <div style="margin-top:12px;font-size:1.1rem;">Iniciando proceso de firma...<br/>Por favor espere hasta finalizar o cancelar.</div>
            </div>
        </div>
    }
    @if (mostrarPdf)
    {
        <div class="modal fade show" style="display:block;" tabindex="-1">
            <div class="modal-dialog modal-xl">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Vista previa del Diploma</h5>
                        <button type="button" class="btn-close" @onclick="CerrarModalPdf"></button>
                    </div>
                    <div class="modal-body" style="height:75vh;background-color:#f8f9fa;">
                        @if (!string.IsNullOrEmpty(pdfUrl))
                        {
                            <object data="@pdfUrl" type="application/pdf" width="100%" height="100%">
                                <embed src="@pdfUrl" type="application/pdf" width="100%" height="100%" />
                            </object>
                        }
                        else
                        {
                            <div class="text-center p-4">Cargando PDF...</div>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalPdf">Cerrar</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }
    <!-- start page title -->
    <div class="row">
        <div class="col-12">
            <div class="page-title-box d-sm-flex align-items-center justify-content-between">
                <h4 class="mb-sm-0">Consejo Regional - Listado Diplomas</h4>

                <div class="page-title-right">
                    <ol class="breadcrumb m-0">
                        <li class="breadcrumb-item"><a href="javascript: void(0);">Inicio</a></li>
                        <li class="breadcrumb-item active">Listado Diplomas</li>
                    </ol>
                </div>

            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-12">
            <div class="card">
                <div class="card-body  pt-0">
                    <div class="d-flex flex-wrap align-items-center mb-3 mt-2 gap-2">
                        <div class="btn-group" role="group" aria-label="Rol de firma">
                            <button type="button" class="btn @(modoFirma == 1 ? "btn-primary" : "btn-outline-primary")" @onclick="(()=>CambiarModo(1))">
                                <i class="ri-user-2-line me-1"></i> Sec. CR
                                <span class="badge bg-light text-primary ms-2">@alumnosMaster.Count(a=>a.EstadoId==6)</span>
                            </button>
                            <button type="button" class="btn @(modoFirma == 2 ? "btn-primary" : "btn-outline-primary")" @onclick="(()=>CambiarModo(2))">
                                <i class="ri-award-line me-1"></i> Decano CR
                                <span class="badge bg-light text-primary ms-2">@alumnosMaster.Count(a=>a.EstadoId==8)</span>
                            </button>
                        </div>
                        <div class="form-check ms-2">
                            <input type="checkbox" id="chkTodos" class="form-check-input" checked="@seleccionarTodos" @onchange="SeleccionarTodasFilas" />
                            <label class="form-check-label" for="chkTodos">Seleccionar todos</label>
                        </div>
                        <button type="button" class="btn btn-primary d-flex align-items-center" @onclick="FirmarSeleccionados">
                            <i class="ri-fingerprint-fill align-middle me-2"></i> Firmar seleccionados
                        </button>
                        <div class="ms-auto" style="min-width:260px;max-width:340px;">
                            <div class="input-group">
                                <span class="input-group-text"><i class="ri-search-2-line"></i></span>
                                <input class="form-control" placeholder="Buscar DNI, nombre o N° solicitud" @bind="Filtro" @bind:event="oninput" />
                            </div>
                        </div>
                    </div>

                    <div class="table-responsive">
                        <table class="table table-hover align-middle mb-0">
                            <thead class="thead-light">
                                <tr>
                                    <th style="width:42px">
                                        <input type="checkbox" class="form-check-input" checked="@seleccionarTodos" @onchange="SeleccionarTodasFilas" />
                                    </th>
                                    <th>N° Solicitud</th>
                                    <th class="d-none d-sm-table-cell">Fecha Solicitud</th>
                                    <th>Estado</th>
                                    <th class="d-none d-md-table-cell">DNI</th>
                                    <th>Nombre</th>
                                    <th class="d-none d-lg-table-cell">N° Colegiatura</th>
                                    <th class="d-none d-md-table-cell">Fecha Emisión</th>
                                    <th>Acciones</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if(!alumnos.Any())
                                {
                                    <tr>
                                        <td colspan="9" class="text-center text-muted py-4">No hay registros para el rol seleccionado.</td>
                                    </tr>
                                }
                                else
                                {
                                    @foreach (var alumno in alumnos)
                                    {
                                        <tr>
                                            <td>
                                                @if ((modoFirma == 1 && alumno.EstadoId == 6) || (modoFirma == 2 && alumno.EstadoId == 8))
                                                {
                                                    <input type="checkbox" class="form-check-input" @bind="alumno.Seleccionado" />
                                                }
                                            </td>
                                            <td>@alumno.NumeroSolicitud</td>
                                            <td class="d-none d-sm-table-cell">@alumno.FechaSolicitud.ToString("dd/MM/yyyy")</td>
                                            <td><span class="badge bg-info">@alumno.EstadoNombre</span></td>
                                            <td class="d-none d-md-table-cell">@alumno.NumeroDocumento</td>
                                            <td>@alumno.NombreCompleto</td>
                                            <td class="d-none d-lg-table-cell">@alumno.NumeroColegiatura</td>
                                            <td class="d-none d-md-table-cell">@alumno.DiplomaFechaEmision.ToString("dd/MM/yyyy")</td>
                                            <td class="text-nowrap">
                                                <button class="btn btn-sm btn-outline-info me-1" title="Ver Diploma" @onclick="(async ()=> await VerDiploma(alumno.SolicitudId, true))">
                                                    <i class="ri-eye-fill"></i>
                                                </button>
                                                @if (alumno.EstadoId == 6)
                                                {
                                                    <button class="btn btn-sm btn-outline-primary" title="Firma Secretario CR" @onclick="(async ()=> await IniciarFirmaRol(alumno.SolicitudId, 1))">
                                                        <i class="ri-user-2-fill"></i>
                                                    </button>
                                                }
                                                else if (alumno.EstadoId == 8)
                                                {
                                                    <button class="btn btn-sm btn-outline-warning" title="Firma Decano CR" @onclick="(async ()=> await IniciarFirmaRol(alumno.SolicitudId, 2))">
                                                        <i class="ri-award-fill"></i>
                                                    </button>
                                                }
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>

                    <!-- Modal Loading -->
                    <div class="modal fade" id="loadingModal" tabindex="-1" aria-hidden="true">
                        <div class="modal-dialog modal-dialog-centered">
                            <div class="modal-content text-center p-4">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Cargando...</span>
                                </div>
                                <p class="mt-3">Descargando Formato...</p>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>

    <!-- Formulario oculto para SignNet (mismo esquema que SG) -->
    <center>
        <form type="post" id="ssoForm" name="ssoForm" target="iframeFirma" action="https://firmadorsignnet.cmp.org.pe:8443/SignnetSignature/Servicio" accept-charset="ISO-8859-1" style="display:none">
            <input type="text" id="codigoFirma" name="codigoFirma" value="" size="40" />
            <input type="button" id="btnFirma" name="btnFirma" value="Firma" />
        </form>
        <div id="dvIframe" class="modal fade">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-body">
                        <iframe frameborder="0" name="iframeFirma" id="iframeFirma" width="550px" height="320px"></iframe>
                    </div>
                </div>
            </div>
        </div>
    </center>
</div>


@code {
    private bool mostrarPdf = false;
    private string? pdfUrl;
    private bool seleccionarTodos = false;
    private List<ItemFirma> paraFirma = new();

    private List<ItemFirmaView> alumnos = new();
    private List<ItemFirmaView> alumnosMaster = new();
    private string filtro = string.Empty;
    private int modoFirma = 1; // 1: Sec. CR (estado 6), 2: Decano CR (estado 8)
    private string Filtro
    {
        get => filtro;
        set
        {
            filtro = value ?? string.Empty;
            AplicarFiltro();
        }
    }
    private bool iniciandoFirma = false;

    private async Task ConfirmarEliminacion(int id)
    {
        var confirmado = await JS.InvokeAsync<bool>("confirmarSweet", "¿Estás seguro?", "Esta acción no se puede deshacer");

        if (confirmado)
        {
            // Eliminar lógica aquí
            Console.WriteLine($"Eliminado: {id}");
        }
    }

    private async Task DescargarFormato()
    {
        await JS.InvokeVoidAsync("mostrarModal", "#loadingModal");

        // Simular una descarga
        await Task.Delay(2000);

        await JS.InvokeVoidAsync("ocultarModal", "#loadingModal");

        // Aquí puedes agregar la lógica real de descarga
    }

    protected override async Task OnInitializedAsync()
    {
        await CargarParaFirma();
        // Crear referencia a instancia si se requiere ampliar JSInvokable con instancia
        selfRef = DotNetObjectReference.Create(this);
    }

    private async Task CargarParaFirma()
    {
        try
        {
            paraFirma = await Http.GetFromJsonAsync<List<ItemFirma>>("api/diploma/para-firma");
            alumnosMaster = paraFirma.Select(x => new ItemFirmaView
            {
                SolicitudId = x.SolicitudId,
                NumeroSolicitud = x.NumeroSolicitud,
                FechaSolicitud = x.FechaSolicitud,
                EstadoId = x.EstadoId,
                EstadoNombre = x.EstadoNombre,
                NumeroDocumento = x.NumeroDocumento,
                NombreCompleto = x.NombreCompleto,
                NumeroColegiatura = x.NumeroColegiatura,
                DiplomaFechaEmision = x.DiplomaFechaEmision
            }).ToList();
            AplicarFiltro();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", new { tag = "CargarParaFirma", error = ex.Message });
        }
    }

    private void CambiarModo(int nuevo)
    {
        modoFirma = nuevo;
        seleccionarTodos = false;
        foreach (var a in alumnos) a.Seleccionado = false;
        AplicarFiltro();
    }

    private void AplicarFiltro()
    {
        if (string.IsNullOrWhiteSpace(filtro))
        {
            alumnos = alumnosMaster
                .Where(a => modoFirma == 1 ? a.EstadoId == 6 : a.EstadoId == 8)
                .ToList();
            return;
        }
        var f = filtro.Trim().ToLowerInvariant();
        alumnos = alumnosMaster.Where(a =>
            (modoFirma == 1 ? a.EstadoId == 6 : a.EstadoId == 8) &&
            a.NumeroSolicitud.ToString().Contains(f)
            || (!string.IsNullOrEmpty(a.NumeroDocumento) && a.NumeroDocumento.ToLower().Contains(f))
            || (!string.IsNullOrEmpty(a.NombreCompleto) && a.NombreCompleto.ToLower().Contains(f))
            || (!string.IsNullOrEmpty(a.NumeroColegiatura) && a.NumeroColegiatura.ToLower().Contains(f))
        ).ToList();
    }

    private string? ObtenerRutaFirmada(int solicitudId)
    {
        return $"/firmas_digitales/documento_{solicitudId}_firmado.pdf";
    }

    private void SeleccionarTodasFilas(ChangeEventArgs e)
    {
        seleccionarTodos = (bool)e.Value;
        foreach (var alumno in alumnos)
        {
            alumno.Seleccionado = seleccionarTodos;
        }
    }

    private async Task FirmarDigitalmente()
    {
        var seleccionados = alumnos.Where(a => a.Seleccionado).ToList();

        if (!seleccionados.Any())
        {
            await JS.InvokeVoidAsync("Swal.fire", new
            {
                icon = "warning",
                title = "Seleccione al menos un registro para firmar",
                showConfirmButton = true
            });
            return;
        }

        if (seleccionados.Count == 1)
        {
            await JS.InvokeVoidAsync("Swal.fire", new
            {
                icon = "success",
                title = $"Firma individual para: {seleccionados.First().NombreCompleto}",
                showConfirmButton = true
            });
        }
        else
        {
            await JS.InvokeVoidAsync("Swal.fire", new
            {
                icon = "info",
                title = $"Firma masiva para {seleccionados.Count} alumnos",
                showConfirmButton = true
            });
        }

        // Aquí iría tu lógica real de firma
    }


    private Queue<int> colaFirmas = new();
    private bool firmandoLote = false;
    private int? firmaActualSolicitudId = null;
    private DotNetObjectReference<FirmarDiplomas>? selfRef;
    private async Task VerDiploma(int solicitudId, bool mostrarEnModal = false)
    {
        try
        {
            var item = alumnosMaster.FirstOrDefault(a => a.SolicitudId == solicitudId);
            bool intentarFirmado = item != null && item.EstadoId >= 8;

            if (intentarFirmado)
            {
                var urlFirmado = ObtenerRutaFirmada(solicitudId);
                var resp = await Http.GetAsync(urlFirmado);
                if (resp.IsSuccessStatusCode)
                {
                    if (mostrarEnModal)
                    {
                        pdfUrl = urlFirmado;
                        mostrarPdf = true;
                        StateHasChanged();
                    }
                    else
                    {
                        await JS.InvokeVoidAsync("open", urlFirmado, "_blank");
                    }
                    return;
                }
            }

            var prep = await Http.PostAsync($"api/diploma/preparar-firma/{solicitudId}", null);
            if (!prep.IsSuccessStatusCode)
            {
                var txt = await prep.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("Swal.fire", new { icon = "error", title = "Error", text = txt });
                return;
            }

            var json = await prep.Content.ReadFromJsonAsync<RespPrep>();
            if (mostrarEnModal)
            {
                pdfUrl = json?.url;
                mostrarPdf = true;
                StateHasChanged();
            }
            else
            {
                await JS.InvokeVoidAsync("open", json?.url, "_blank");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("Swal.fire", new { icon = "error", title = "Error", text = ex.Message });
        }
    }

    private void CerrarModalPdf()
    {
        mostrarPdf = false;
        pdfUrl = null;
        StateHasChanged();
    }

    private async Task IniciarFirma(int solicitudId)
    {
        try
        {
            // Asegurar que el PDF de trabajo es el mismo que se visualiza en "Ver Diploma"
            var preparar = await Http.PostAsync($"api/diploma/preparar-firma/{solicitudId}", null);
            if (!preparar.IsSuccessStatusCode)
            {
                var errPrep = await preparar.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("Swal.fire", new { icon = "error", title = "No se pudo preparar el PDF para firma", html = errPrep });
                return;
            }

            // Paso 1: enviar a firmador para obtener codigoFirma (reutilizar endpoint existente)
            var firmaRequest = new { IdExpedienteDocumento = solicitudId, IdExpedienteDocumentoFirmante = 0, TipoDocumentoFirmado = 0 };
            var resp1 = await Http.PostAsJsonAsync("api/firmadigital/firmar", firmaRequest);
            if (!resp1.IsSuccessStatusCode)
            {
                var err = await resp1.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("Swal.fire", new { icon = "error", title = "Error al iniciar firma", html = err });
                return;
            }
            var up = await resp1.Content.ReadFromJsonAsync<UploadResponse>();
            if (up?.codigoFirma <= 0)
            {
                await JS.InvokeVoidAsync("Swal.fire", new { icon = "error", title = "Firma", text = up?.descripcion ?? "Sin código de firma" });
                return;
            }

            // Mostrar formulario/iframe de firma (igual que SG). Inyectamos funciones JS y registramos ref .NET
            await RegistrarFuncionesFirmaSiFaltan();
            if (selfRef is not null)
            {
                await JS.InvokeVoidAsync("registerCmpFirmaRef", selfRef);
            }
            await JS.InvokeVoidAsync("mostrarFormularioFirma", up.codigoFirma);
            firmaActualSolicitudId = solicitudId;
            await RegistrarEventoCierreModal();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("Swal.fire", new { icon = "error", title = "Error", text = ex.Message });
        }
    }

    private async Task IniciarFirmaRol(int solicitudId, int tipoDocumentoFirmado)
    {
        try
        {
            iniciandoFirma = true;
            StateHasChanged();
            // Preparar el PDF de trabajo
            var preparar = await Http.PostAsync($"api/diploma/preparar-firma/{solicitudId}", null);
            if (!preparar.IsSuccessStatusCode)
            {
                var errPrep = await preparar.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("Swal.fire", new { icon = "error", title = "No se pudo preparar el PDF para firma", html = errPrep });
                iniciandoFirma = false;
                StateHasChanged();
                return;
            }

            // Solicitar código de firma con coordenadas del rol
            var firmaRequest = new { IdExpedienteDocumento = solicitudId, IdExpedienteDocumentoFirmante = 0, TipoDocumentoFirmado = tipoDocumentoFirmado };
            var resp1 = await Http.PostAsJsonAsync("api/firmadigital/firmar", firmaRequest);
            if (!resp1.IsSuccessStatusCode)
            {
                var err = await resp1.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("Swal.fire", new { icon = "error", title = "Error al iniciar firma", html = err });
                iniciandoFirma = false;
                StateHasChanged();
                return;
            }
            var up = await resp1.Content.ReadFromJsonAsync<UploadResponse>();
            if (up?.codigoFirma <= 0)
            {
                await JS.InvokeVoidAsync("Swal.fire", new { icon = "error", title = "Firma", text = up?.descripcion ?? "Sin código de firma" });
                iniciandoFirma = false;
                StateHasChanged();
                return;
            }

            await RegistrarFuncionesFirmaSiFaltan();
            if (selfRef is not null)
            {
                await JS.InvokeVoidAsync("registerCmpFirmaRef", selfRef);
            }
            await JS.InvokeVoidAsync("mostrarFormularioFirma", up.codigoFirma);
            firmaActualSolicitudId = solicitudId;
            await RegistrarEventoCierreModal();
            // Mantener loading hasta terminar/cancelar/errores
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("Swal.fire", new { icon = "error", title = "Error", text = ex.Message });
            iniciandoFirma = false;
            StateHasChanged();
        }
    }

    private async Task RegistrarEventoCierreModal()
    {
        // Vincula un listener al cierre del modal para avanzar en la cola de firmas
        var script = @"(function(){
            if(window.__cmpFirmaModalHooked) return;
            window.__cmpFirmaModalHooked = true;
            $('#dvIframe').on('hidden.bs.modal', function(){
                if(window.__cmpFirmaModalCallback){ window.__cmpFirmaModalCallback(); }
            });
        })();";
        await JS.InvokeVoidAsync("eval", script);
        await JS.InvokeVoidAsync("eval", "window.__cmpFirmaModalCallback = function(){ DotNet.invokeMethodAsync('MatriculaCMP.Client', 'OnFirmaModalCerrado'); };");
    }

    [JSInvokable]
    public static Task OnFirmaModalCerrado()
    {
        // Método estático requerido por invokeMethodAsync; se reencamina a instancia mediante un evento global
        return Task.CompletedTask;
    }

    private async Task FirmarSeleccionados()
    {
        var seleccionados = alumnos.Where(a => a.Seleccionado).Select(a => a.SolicitudId).ToList();
        if (!seleccionados.Any())
        {
            await JS.InvokeVoidAsync("Swal.fire", new { icon = "warning", title = "Seleccione al menos un registro" });
            return;
        }
        try
        {
            iniciandoFirma = true;
            StateHasChanged();

            // Preparar todos los PDFs de trabajo para el lote (deben existir en wwwroot/firmas_digitales)
            var fallidos = new List<int>();
            foreach (var id in seleccionados)
            {
                var prep = await Http.PostAsync($"api/diploma/preparar-firma/{id}", null);
                if (!prep.IsSuccessStatusCode)
                {
                    fallidos.Add(id);
                }
            }
            if (fallidos.Any())
            {
                await JS.InvokeVoidAsync("Swal.fire", new { icon = "error", title = "No se pudo preparar algunos PDFs", html = $"IDs: {string.Join(", ", fallidos)}" });
                iniciandoFirma = false;
                StateHasChanged();
                return;
            }

            var tipoLote = (modoFirma == 1) ? 1 : 2;
            var dto = new { Ids = seleccionados, TipoDocumentoFirmado = tipoLote };
            var resp = await Http.PostAsJsonAsync("api/firmadigital-lote/firmar", dto);
            if (!resp.IsSuccessStatusCode)
            {
                var err = await resp.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("Swal.fire", new { icon = "error", title = "Error al iniciar firma en lote", html = err });
                iniciandoFirma = false;
                StateHasChanged();
                return;
            }
            var up = await resp.Content.ReadFromJsonAsync<UploadResponse>();
            if (up?.codigoFirma <= 0)
            {
                await JS.InvokeVoidAsync("Swal.fire", new { icon = "error", title = "Firma Lote", text = up?.descripcion ?? "Sin código de firma" });
                iniciandoFirma = false;
                StateHasChanged();
                return;
            }
            await RegistrarFuncionesFirmaSiFaltan();
            if (selfRef is not null)
            {
                await JS.InvokeVoidAsync("registerCmpFirmaRef", selfRef);
            }
            await JS.InvokeVoidAsync("mostrarFormularioFirma", up.codigoFirma);
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("Swal.fire", new { icon = "error", title = "Error", text = ex.Message });
            iniciandoFirma = false;
            StateHasChanged();
        }
    }

    private async Task ProcesarSiguienteEnCola()
    {
        if (!colaFirmas.Any())
        {
            firmandoLote = false;
            await JS.InvokeVoidAsync("Swal.fire", new { icon = "success", title = "Firma masiva finalizada" });
            return;
        }
        var siguienteId = colaFirmas.Dequeue();
        await IniciarFirma(siguienteId);
    }

    private async Task RegistrarFuncionesFirmaSiFaltan()
    {
        // Inserta dinámicamente las funciones JS requeridas si no están disponibles
        var script = @"(function(){
            if(!window.mostrarFormularioFirma){
                window.mostrarFormularioFirma = function(codigoFirma){
                    var form = document.getElementById('ssoForm');
                    var input = document.getElementById('codigoFirma');
                    if(!form){
                        console.error('No existe el formulario de firma');
                        return;
                    }
                    input.value = codigoFirma;
                    $('#dvIframe').modal({ backdrop: 'static', keyboard: false, show: true });
                    form.submit();
                };
            }
            if(!window.obtenerCodigoFirmaDesdeFormulario){
                window.obtenerCodigoFirmaDesdeFormulario = function(){
                    var input = document.getElementById('codigoFirma');
                    return input ? input.value : '';
                };
            }
            if(!window.registerCmpFirmaRef){
                window.registerCmpFirmaRef = function(dotnetRef){
                    window.__cmpFirmaDotnet = dotnetRef;
                };
            }
            if(!window.__cmpFirmaMsgHooked){
                window.__cmpFirmaMsgHooked = true;
                window.addEventListener('message', function(e){
                    try{
                        var rptJSON = JSON.parse(e.data);
                        if(rptJSON && rptJSON.resultado === '0' && window.__cmpFirmaDotnet){
                            $('#dvIframe').modal('hide');
                            window.__cmpFirmaDotnet.invokeMethodAsync('SubirDocumentoFirmadoDesdeIframe', JSON.stringify(rptJSON));
                        } else if(window.__cmpFirmaDotnet){
                            $('#dvIframe').modal('hide');
                            var msg = (rptJSON && rptJSON.estado) ? rptJSON.estado : 'La firma fue cancelada por el usuario.';
                            window.__cmpFirmaDotnet.invokeMethodAsync('OnFirmaCancelada', msg);
                        }
                    }catch(ex){
                        console.error('Error parseando mensaje de SignNet', e.data);
                    }
                });
            }
        })();";
        await JS.InvokeVoidAsync("eval", script);
    }

    [JSInvokable]
    public async Task SubirDocumentoFirmadoDesdeIframe(string rptJsonStr)
    {
        try
        {
            var codigoFirma = await JS.InvokeAsync<string>("obtenerCodigoFirmaDesdeFormulario");
            if (string.IsNullOrWhiteSpace(codigoFirma) || !int.TryParse(codigoFirma, out var codigo))
            {
                await JS.InvokeVoidAsync("Swal.fire", new { icon = "error", title = "Código de firma inválido" });
                return;
            }

            var seleccionados = alumnos.Where(a => a.Seleccionado).Select(a => a.SolicitudId).ToList();
            HttpResponseMessage responseUpload;
            if (seleccionados.Count > 1)
            {
                var tipoLote = (modoFirma == 1) ? 1 : 2;
                responseUpload = await Http.PostAsJsonAsync("api/firmadigital-lote/upload", new { CodigoFirma = codigo, TipoDocumentoFirmado = tipoLote });
            }
            else
            {
                int tipoDoc = 1;
                if (alumnos.FirstOrDefault(a => a.SolicitudId == (firmaActualSolicitudId ?? 0))?.EstadoId == 8)
                    tipoDoc = 2;
                var uploadRequest = new { IdExpedienteDocumento = firmaActualSolicitudId ?? 0, IdExpedienteDocumentoFirmante = 0, CodigoFirma = codigo, TipoDocumentoFirmado = (int?)tipoDoc };
                responseUpload = await Http.PostAsJsonAsync("api/firmadigital/upload", uploadRequest);
            }
            if (responseUpload.IsSuccessStatusCode)
            {
                var resultadoUpload = await responseUpload.Content.ReadFromJsonAsync<DownloadResponse>();
                await JS.InvokeVoidAsync("Swal.fire", new { icon = "success", title = resultadoUpload?.descripcion ?? "Documento firmado y registrado", showConfirmButton = true });
                // Refrescar datos desde el backend
                await CargarParaFirma();
                // Ajuste optimista: mover de Sec. CR (6) a Pendiente Firma Sec. CR (8) en firma individual o lote
                try
                {
                    var seleccionadosLocal = alumnosMaster.Where(a => a.Seleccionado).Select(a => a.SolicitudId).ToList();
                    if (modoFirma == 1)
                    {
                        var ids = (seleccionadosLocal.Count > 0) ? seleccionadosLocal : new List<int> { firmaActualSolicitudId ?? 0 };
                        foreach (var id in ids)
                        {
                            var item = alumnosMaster.FirstOrDefault(a => a.SolicitudId == id);
                            if (item != null && item.EstadoId == 6)
                            {
                                item.EstadoId = 8;
                                item.EstadoNombre = "Pendiente Firma Secretario CR";
                            }
                        }
                        AplicarFiltro();
                        StateHasChanged();
                    }
                    else if (modoFirma == 2)
                    {
                        var ids = (seleccionadosLocal.Count > 0) ? seleccionadosLocal : new List<int> { firmaActualSolicitudId ?? 0 };
                        foreach (var id in ids)
                        {
                            var item = alumnosMaster.FirstOrDefault(a => a.SolicitudId == id);
                            if (item != null && item.EstadoId == 8)
                            {
                                item.EstadoId = 9;
                                item.EstadoNombre = "Pendiente Firma Decano CR";
                            }
                        }
                        AplicarFiltro();
                        StateHasChanged();
                    }
                }
                catch { }
                iniciandoFirma = false;
                StateHasChanged();
            }
            else
            {
                var error = await responseUpload.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("Swal.fire", new { icon = "error", title = "Error al subir documento firmado", html = error });
                iniciandoFirma = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("Swal.fire", new { icon = "error", title = "Error inesperado", text = ex.Message });
            iniciandoFirma = false;
            StateHasChanged();
        }
    }

    [JSInvokable]
    public async Task OnFirmaCancelada(string mensaje)
    {
        await JS.InvokeVoidAsync("Swal.fire", new { icon = "info", title = "Firma cancelada", html = mensaje, showConfirmButton = true });
        iniciandoFirma = false;
        StateHasChanged();
        if (firmandoLote)
        {
            await ProcesarSiguienteEnCola();
        }
    }

    public class RespPrep { public bool success { get; set; } public string url { get; set; } }

    public class ItemFirma
    {
        public int SolicitudId { get; set; }
        public int NumeroSolicitud { get; set; }
        public DateTime FechaSolicitud { get; set; }
        public int EstadoId { get; set; }
        public string EstadoNombre { get; set; }
        public int PersonaId { get; set; }
        public string NumeroDocumento { get; set; }
        public string NombreCompleto { get; set; }
        public string NumeroColegiatura { get; set; }
        public DateTime DiplomaFechaEmision { get; set; }
        public string RutaPdf { get; set; }
    }

    public class ItemFirmaView
    {
        public int SolicitudId { get; set; }
        public int NumeroSolicitud { get; set; }
        public DateTime FechaSolicitud { get; set; }
        public int EstadoId { get; set; }
        public string EstadoNombre { get; set; }
        public string NumeroDocumento { get; set; }
        public string NombreCompleto { get; set; }
        public string NumeroColegiatura { get; set; }
        public DateTime DiplomaFechaEmision { get; set; }
        public bool Seleccionado { get; set; }
    }

}

