@page "/consejoregional/firmar-diplomas"
@using MatriculaCMP.Shared
@using static MatriculaCMP.Shared.FirmaDigitalDTO
@inject IJSRuntime JS
@inject HttpClient Http


<div class="container-fluid">
    @if (mostrarPdf)
    {
        <div class="modal fade show" style="display:block;" tabindex="-1">
            <div class="modal-dialog modal-xl">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Vista previa del Diploma</h5>
                        <button type="button" class="btn-close" @onclick="CerrarModalPdf"></button>
                    </div>
                    <div class="modal-body" style="height:75vh;background-color:#f8f9fa;">
                        @if (!string.IsNullOrEmpty(pdfUrl))
                        {
                            <object data="@pdfUrl" type="application/pdf" width="100%" height="100%">
                                <embed src="@pdfUrl" type="application/pdf" width="100%" height="100%" />
                            </object>
                        }
                        else
                        {
                            <div class="text-center p-4">Cargando PDF...</div>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalPdf">Cerrar</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }
    <!-- start page title -->
    <div class="row">
        <div class="col-12">
            <div class="page-title-box d-sm-flex align-items-center justify-content-between">
                <h4 class="mb-sm-0">Consejo Regional - Listado Diplomas</h4>

                <div class="page-title-right">
                    <ol class="breadcrumb m-0">
                        <li class="breadcrumb-item"><a href="javascript: void(0);">Inicio</a></li>
                        <li class="breadcrumb-item active">Listado Diplomas</li>
                    </ol>
                </div>

            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-12">
            <div class="card">
                <div class="card-body  pt-0">
                    <ul class="nav nav-tabs nav-tabs-custom mb-4">
                        <li class="nav-item">
                            <a class="nav-link fw-bold p-3 @(tabActiva == "nacionales" ? "active" : "")"
                               @onclick='() => CambiarTab("nacionales")'>Solicitudes Nacionales</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link fw-bold p-3 @(tabActiva == "extranjeros" ? "active" : "")"
                               @onclick='() => CambiarTab("extranjeros")'>Solicitudes Extranjeros</a>
                        </li>
                    </ul>
                    @if (tabActiva == "nacionales")
                    {
                        <div class="alert alert-primary mb-2 mt-2" role="alert">
                            <div class="button-items">
                                <button type="button" class="btn btn-primary">
                                    <i class="ri-fingerprint-fill align-middle me-2"></i> Firmar en Lote
                                </button>
                            </div>
                        </div>

                        <div class="table-responsive">
                            <table class="table table-centered datatable">
                                <thead class="thead-light">
                                    <tr>
                                        <th>
                                            <input type="checkbox" class="form-check-input" checked="@seleccionarTodos" @onchange="SeleccionarTodasFilas" />
                                        </th>
                                        <th>N° Solicitud</th>
                                        <th>Fecha Solicitud</th>
                                        <th>Estado</th>
                                        <th>DNI</th>
                                        <th>Nombres Completos</th>
                                        <th>N° Colegiatura</th>
                                        <th>Fecha Emisión Diploma</th>
                                        <th>Acciones</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var alumno in alumnos)
                                    {
                                        <tr @onclick="() => alumno.Seleccionado = !alumno.Seleccionado" style="cursor: pointer;">
                                            <td>
                                                <input type="checkbox" class="form-check-input" @bind="alumno.Seleccionado" @onclick:stopPropagation="true" />
                                            </td>
                                            <td>@alumno.NumeroSolicitud</td>
                                            <td>@alumno.FechaSolicitud.ToString("dd/MM/yyyy")</td>
                                            <td><div class="badge bg-success">@alumno.EstadoNombre</div></td>
                                            <td>@alumno.NumeroDocumento</td>
                                            <td>@alumno.NombreCompleto</td>
                                            <td>@alumno.NumeroColegiatura</td>
                                            <td>@alumno.DiplomaFechaEmision.ToString("dd/MM/yyyy")</td>
                                            <td>
                                                <a href="javascript:void(0);" class="me-3 text-info" title="Ver Diploma" @onclick="(async ()=> await VerDiploma(alumno.SolicitudId, true))">
                                                    <i class="ri-eye-fill font-size-18"></i>
                                                </a>
                                                <a href="javascript:void(0);" class="text-primary" title="Iniciar Firma" @onclick="(async ()=> await IniciarFirma(alumno.SolicitudId))">
                                                    <i class="ri-fingerprint-fill font-size-18"></i>
                                                </a>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }

                    <!-- Modal Loading -->
                    <div class="modal fade" id="loadingModal" tabindex="-1" aria-hidden="true">
                        <div class="modal-dialog modal-dialog-centered">
                            <div class="modal-content text-center p-4">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Cargando...</span>
                                </div>
                                <p class="mt-3">Descargando Formato...</p>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>

    <!-- Formulario oculto para SignNet (mismo esquema que SG) -->
    <center>
        <form type="post" id="ssoForm" name="ssoForm" target="iframeFirma" action="https://firmadorsignnet.cmp.org.pe:8443/SignnetSignature/Servicio" accept-charset="ISO-8859-1" style="display:none">
            <input type="text" id="codigoFirma" name="codigoFirma" value="" size="40" />
            <input type="button" id="btnFirma" name="btnFirma" value="Firma" />
        </form>
        <div id="dvIframe" class="modal fade">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-body">
                        <iframe frameborder="0" name="iframeFirma" id="iframeFirma" width="550px" height="320px"></iframe>
                    </div>
                </div>
            </div>
        </div>
    </center>
</div>


@code {
    private bool mostrarPdf = false;
    private string? pdfUrl;
    private bool seleccionarTodos = false;
    private string tabActiva = "nacionales";
    private List<ItemFirma> paraFirma = new();

    private List<ItemFirmaView> alumnos = new();
    private List<ItemFirmaView> alumnos2 = new();

    private async Task ConfirmarEliminacion(int id)
    {
        var confirmado = await JS.InvokeAsync<bool>("confirmarSweet", "¿Estás seguro?", "Esta acción no se puede deshacer");

        if (confirmado)
        {
            // Eliminar lógica aquí
            Console.WriteLine($"Eliminado: {id}");
        }
    }

    private async Task DescargarFormato()
    {
        await JS.InvokeVoidAsync("mostrarModal", "#loadingModal");

        // Simular una descarga
        await Task.Delay(2000);

        await JS.InvokeVoidAsync("ocultarModal", "#loadingModal");

        // Aquí puedes agregar la lógica real de descarga
    }

    protected override async Task OnInitializedAsync()
    {
        await CargarParaFirma();
    }

    private async Task CargarParaFirma()
    {
        try
        {
            paraFirma = await Http.GetFromJsonAsync<List<ItemFirma>>("api/diploma/para-firma");
            alumnos = paraFirma.Select(x => new ItemFirmaView
            {
                SolicitudId = x.SolicitudId,
                NumeroSolicitud = x.NumeroSolicitud,
                FechaSolicitud = x.FechaSolicitud,
                EstadoNombre = x.EstadoNombre,
                NumeroDocumento = x.NumeroDocumento,
                NombreCompleto = x.NombreCompleto,
                NumeroColegiatura = x.NumeroColegiatura,
                DiplomaFechaEmision = x.DiplomaFechaEmision
            }).ToList();

            alumnos2 = new List<ItemFirmaView>();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", new { tag = "CargarParaFirma", error = ex.Message });
        }
    }

    private void SeleccionarTodasFilas(ChangeEventArgs e)
    {
        seleccionarTodos = (bool)e.Value;
        foreach (var alumno in alumnos)
        {
            alumno.Seleccionado = seleccionarTodos;
        }
    }

    private async Task FirmarDigitalmente()
    {
        var seleccionados = alumnos.Where(a => a.Seleccionado).ToList();

        if (!seleccionados.Any())
        {
            await JS.InvokeVoidAsync("Swal.fire", new
            {
                icon = "warning",
                title = "Seleccione al menos un registro para firmar",
                showConfirmButton = true
            });
            return;
        }

        if (seleccionados.Count == 1)
        {
            await JS.InvokeVoidAsync("Swal.fire", new
            {
                icon = "success",
                title = $"Firma individual para: {seleccionados.First().NombreCompleto}",
                showConfirmButton = true
            });
        }
        else
        {
            await JS.InvokeVoidAsync("Swal.fire", new
            {
                icon = "info",
                title = $"Firma masiva para {seleccionados.Count} alumnos",
                showConfirmButton = true
            });
        }

        // Aquí iría tu lógica real de firma
    }


    private void CambiarTab(string tab)
    {
        tabActiva = tab;
    }
    private async Task VerDiploma(int solicitudId, bool mostrarEnModal = false)
    {
        try
        {
            var prep = await Http.PostAsync($"api/diploma/preparar-firma/{solicitudId}", null);
            if (prep.IsSuccessStatusCode)
            {
                var json = await prep.Content.ReadFromJsonAsync<RespPrep>();
                if (mostrarEnModal)
                {
                    pdfUrl = json?.url;
                    mostrarPdf = true;
                    StateHasChanged();
                }
                else
                {
                    await JS.InvokeVoidAsync("open", json?.url, "_blank");
                }
            }
            else
            {
                var txt = await prep.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("Swal.fire", new { icon = "error", title = "Error", text = txt });
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("Swal.fire", new { icon = "error", title = "Error", text = ex.Message });
        }
    }

    private void CerrarModalPdf()
    {
        mostrarPdf = false;
        pdfUrl = null;
        StateHasChanged();
    }

    private async Task IniciarFirma(int solicitudId)
    {
        try
        {
            // Paso 1: enviar a firmador para obtener codigoFirma (reutilizar endpoint existente)
            var firmaRequest = new { IdExpedienteDocumento = solicitudId, IdExpedienteDocumentoFirmante = 0, TipoDocumentoFirmado = 0 };
            var resp1 = await Http.PostAsJsonAsync("api/firmadigital/firmar", firmaRequest);
            if (!resp1.IsSuccessStatusCode)
            {
                var err = await resp1.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("Swal.fire", new { icon = "error", title = "Error al iniciar firma", html = err });
                return;
            }
            var up = await resp1.Content.ReadFromJsonAsync<UploadResponse>();
            if (up?.codigoFirma <= 0)
            {
                await JS.InvokeVoidAsync("Swal.fire", new { icon = "error", title = "Firma", text = up?.descripcion ?? "Sin código de firma" });
                return;
            }

            // Mostrar formulario/iframe de firma (igual que SG). Inyectamos la función JS si no existe.
            await RegistrarFuncionesFirmaSiFaltan();
            await JS.InvokeVoidAsync("mostrarFormularioFirma", up.codigoFirma);
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("Swal.fire", new { icon = "error", title = "Error", text = ex.Message });
        }
    }

    private async Task RegistrarFuncionesFirmaSiFaltan()
    {
        // Inserta dinámicamente las funciones JS requeridas si no están disponibles
        var script = @"(function(){
            if(!window.mostrarFormularioFirma){
                window.mostrarFormularioFirma = function(codigoFirma){
                    var form = document.getElementById('ssoForm');
                    var input = document.getElementById('codigoFirma');
                    if(!form){
                        console.error('No existe el formulario de firma');
                        return;
                    }
                    input.value = codigoFirma;
                    $('#dvIframe').modal({ backdrop: 'static', keyboard: false, show: true });
                    form.submit();
                };
            }
            if(!window.obtenerCodigoFirmaDesdeFormulario){
                window.obtenerCodigoFirmaDesdeFormulario = function(){
                    var input = document.getElementById('codigoFirma');
                    return input ? input.value : '';
                };
            }
        })();";
        await JS.InvokeVoidAsync("eval", script);
    }

    public class RespPrep { public bool success { get; set; } public string url { get; set; } }

    public class ItemFirma
    {
        public int SolicitudId { get; set; }
        public int NumeroSolicitud { get; set; }
        public DateTime FechaSolicitud { get; set; }
        public int EstadoId { get; set; }
        public string EstadoNombre { get; set; }
        public int PersonaId { get; set; }
        public string NumeroDocumento { get; set; }
        public string NombreCompleto { get; set; }
        public string NumeroColegiatura { get; set; }
        public DateTime DiplomaFechaEmision { get; set; }
        public string RutaPdf { get; set; }
    }

    public class ItemFirmaView
    {
        public int SolicitudId { get; set; }
        public int NumeroSolicitud { get; set; }
        public DateTime FechaSolicitud { get; set; }
        public string EstadoNombre { get; set; }
        public string NumeroDocumento { get; set; }
        public string NombreCompleto { get; set; }
        public string NumeroColegiatura { get; set; }
        public DateTime DiplomaFechaEmision { get; set; }
        public bool Seleccionado { get; set; }
    }

}

