@page "/home"
@using MatriculaCMP.Client.Layout
@using MatriculaCMP.Shared
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http

@if (!string.IsNullOrEmpty(perfilUsuario) && tiles is not null)
{
    @if (perfilUsuario != "2")
    {
        <h3 class="mb-4">Panel de Control - @perfilNombre</h3>
        <div class="row">
            @foreach (var item in tiles)
            {
                <div class="col-12 col-sm-6 col-md-4 col-lg-3 mb-4">
                    <div class="card cmp-tile shadow-sm border-0 bg-@item.color @GetTileTextClass(item.color)">
                        <div class="card-body d-flex align-items-center justify-content-between">
                            <div>
                                <div class="tile-title">@item.titulo</div>
                                <div class="tile-value">@item.valor</div>
                            </div>
                            <div class="icon-wrap">
                                <i class="@item.icono fs-2"></i>
                            </div>
                        </div>
                    </div>
                </div>
            }
            
        </div>
    }
    else
    {
        <h3 class="mb-4">Seguimiento de Colegiatura</h3>
    }
    
    @if (perfilUsuario == "2")
    {
        <div class="row">
            <div class="col-xl-8">

                <div class="card">
                    <div class="card-body">
                        <div class="float-right d-none d-md-inline-block">
                            <div class="btn-group mb-2">...</div>
                        </div>
                        <h4 class="card-title mb-4">Estados de la colegiatura</h4>
                        <div>
                            <div class="table-responsive">
                                @if (isLoading)
                                {
                                    <div class="text-center">
                                        <div class="spinner-border" role="status">
                                            <span class="visually-hidden">Loading as...</span>
                                        </div>
                                    </div>
                                }
                                else if (!string.IsNullOrEmpty(errorMessage))
                                {
                                    <div class="alert alert-danger">@errorMessage</div>
                                }
                                else
                                {
                                    <table class="table mb-0">
                                        <thead>
                                            <tr>
                                                <th>#</th>
                                                <th>Estado</th>
                                                <th>Estado</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @if (estadosResponse.Estados != null && estadosResponse.Estados.Count > 0)
                                            {
                                                int index = 1;
                                                @foreach (var estado in estadosResponse.Estados)
                                                {
                                                    <tr class="table-@estado.Color">
                                                        <th scope="row">@index</th>
                                                        <td>@estado.Nombre</td>
                                                        <td>
                                                            @if (@estado.TieneCheck)
                                                            {
                                                                <input type="checkbox" id="chk_@estado.Id"
                                                                       class="form-check-input"
                                                                disabled checked />
                                                            }
                                                            else
                                                            {
                                                                <input type="checkbox" id="chk_@estado.Id"
                                                                       class="form-check-input"
                                                                       disabled />
                                                            }
                                                        </td>
                                                    </tr>
                                                    index++;
                                                }
                                            }
                                            else
                                            {
                                                <tr>
                                                    <td colspan="7" class="text-center">No se encontraron solicitudes</td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-xl-4">
                <div class="card">
                    <div class="card-body">
                        <div class="float-right">...</div>
                        <h4 class="card-title mb-4">...</h4>

                        <div id="donut-chart" class="apex-charts"></div>

                        <div class="row">
                            <div class="col-12">
                                <div class="text-center mt-4">
                                    <p class="mb-2 text-truncate"><i class="mdi mdi-circle text-primary font-size-10 mr-1"></i> Estado Actual</p>
                                    <h5>@UltimoEstado</h5>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- end row -->
    }
   
}
else
{
    <div class="alert alert-info d-flex align-items-center" role="alert">
        <div class="spinner-border text-info me-2" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
        Cargando...
    </div>
}

@code {
    private string perfilUsuario = "";
    private string perfilNombre = "";
    private string PersonaId;
    private string UltimoEstado;
    private List<DashboardTileDto>? tiles;

    private List<int> ventasMensuales = new() { 15, 30, 45, 25 };
    private List<string> meses = new() { "Ene", "Feb", "Mar", "Abr" };

    private List<int> productos = new() { 30, 50, 20 };
    private List<string> productosLabels = new() { "Estado A", "Estado B", "Estado C" };
    private List<EstadoSolicitudConCheckDto> estados = new();
    private bool isLoading = true;
    private string errorMessage = string.Empty;
    private EstadoSolicitudConCheckResponse? estadosResponse;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated ?? false)
            {
                perfilUsuario = user.FindFirst("PerfilId")?.Value ?? "1";
                perfilNombre = user.FindFirst("PerfilNombre")?.Value ?? "";
                PersonaId = user.FindFirst("PersonaId")?.Value ?? "-";

                await CargarTiles();
                if (perfilUsuario == "2")
                {
                    await cargartabla(); // Añadido await aquí
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error inicial: {ex.Message}";
            Console.WriteLine($"Error en OnInitializedAsync: {ex}");
        }
    }

    protected async Task cargartabla()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            if (int.TryParse(PersonaId, out int personaId))
            {
                estadosResponse = await Http.GetFromJsonAsync<EstadoSolicitudConCheckResponse>(
                    $"api/personaseducacion/EstadosConCheck/{personaId}");

                // Renderizar el gráfico después de cargar los datos
                if (estadosResponse != null)
                {
                    UltimoEstado = estadosResponse.NombreUltimoEstado;
                    await RenderizarGrafico();
                }
            }
            else
            {
                errorMessage = "ID de persona no válido";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar los estados: {ex.Message}";
            Console.WriteLine($"Error en cargartabla: {ex}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    private async Task CargarTiles()
    {
        try
        {
            int? persona = int.TryParse(PersonaId, out var pid) ? pid : null;
            var url = $"api/dashboard/resumen?perfilId={perfilUsuario}" + (persona.HasValue ? $"&personaId={persona.Value}" : "");
            tiles = await Http.GetFromJsonAsync<List<DashboardTileDto>>(url);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error CargarTiles: {ex.Message}");
            tiles = new();
        }
    }
    private async Task RenderizarGrafico()
    {
        try
        {
            var porcentajeArray = new[] { (int)Math.Round(estadosResponse!.PorcentajeCompletado) };

            await JS.InvokeVoidAsync(
                "renderApexChart",
                ventasMensuales,
                meses,
                porcentajeArray,
                new[] { "Progreso" }
            );
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al renderizar gráfico: {ex.Message}");
        }
    }

    private string GetTileTextClass(string bg)
    {
        var darks = new HashSet<string>(StringComparer.OrdinalIgnoreCase)
        {
            "primary","secondary","dark","info","cmp-primary","morado"
        };
        return darks.Contains(bg) ? "text-white" : "text-dark";
    }
}

