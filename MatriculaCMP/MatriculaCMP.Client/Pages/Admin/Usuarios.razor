@page "/admin/usuarios"
@using MatriculaCMP.Shared
@using System.Text.Json;
@inject HttpClient Http
@inject NavigationManager Nav
@inject IJSRuntime JS

@switch (estado)
{
    case Estado.Cargando:
        <em>Cargando…</em>
        break;

    case Estado.Error:
        <div class="alert alert-danger">
            <strong>Error:</strong> @mensajeError
        </div>
        break;

    case Estado.Listo:
        <div class="container-fluid">
            <!-- start page title -->
            <div class="row">
                <div class="col-12">
                    <div class="page-title-box d-sm-flex align-items-center justify-content-between">
                        <h4 class="mb-sm-0">Usuarios</h4>

                        <div class="page-title-right">
                            <ol class="breadcrumb m-0">
                                <li class="breadcrumb-item"><a href="javascript: void(0);">Inicio</a></li>
                                <li class="breadcrumb-item active">Usuarios</li>
                            </ol>
                        </div>

                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-12">
                    <div class="card">
                        <div class="card-body  pt-0">
                            <div class="alert alert-primary mb-2 mt-2" role="alert">
                                <div class="button-items">
                                    <button class="btn btn-primary waves-effect waves-light mb-3"
                                            @onclick="@(() => Nav.NavigateTo("/admin/usuarios/new"))">
                                        <i class="ri-add-fill"></i> Nuevo Usuario
                                    </button>
                                </div>
                            </div>

                            <div class="col-sm-12">
                                <table id="tblListadoUsuarios" class="table table-centered datatable dt-responsive nowrap dataTable no-footer dtr-inline ml-2 w-100">
                                    <thead>
                                        <tr>
                                            <th>#</th>
                                            <th>Nombres Completos</th>
                                            <th>Correo</th>
                                            <th>Rol</th>
                                            <th>Consejo Regional</th>
                                            <th></th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @* @foreach (var u in usuarios!) *@
                                        @foreach (var (u, idx) in usuarios!.Select((value, index) => (value, index)))
                                        {
                                            <tr>
                                                <td>@(idx + 1)</td>
                                                <td>@u.Persona?.NombresCompletos</td>
                                                <td>@u.Correo</td>
                                                <td>@u.Perfil?.Nombre</td>
                                                @* <td>@u.Persona?.ConsejoRegionalId</td>
                                                <td>@(consejosMap.TryGetValue(int.Parse(u.Persona.ConsejoRegionalId), out var nombre) ? nombre : "-")</td> *@
                                                <td>
                                                    @(
                                                        int.TryParse(u.Persona?.ConsejoRegionalId, out var crId) &&
                                                        consejosMap.TryGetValue(crId, out var nombre)
                                                        ? nombre
                                                        : "-"
                                                        )
                                                </td>


                                                <td class="text-end">
                                                    <button class="btn btn-sm btn-secondary me-1"
                                                            @onclick="() => Editar(u.Id)">
                                                        <i class="ri-edit-2-line"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-danger"
                                                            @onclick="() => Eliminar(u.Id)">
                                                        <i class="ri-delete-bin-line"></i>
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        break;
}

@code
{
    enum Estado { Cargando, Listo, Error }

    List<Usuario>? usuarios;
    Estado estado = Estado.Cargando;
    string? mensajeError;
    private Dictionary<int, string> consejosMap = new();

    protected override async Task OnInitializedAsync()
    {
        var consejos = await Http.GetFromJsonAsync<List<Mat_ConsejoRegional>>("api/consejoregional");
        if (consejos != null)
        {
            consejosMap = consejos.ToDictionary(c => c.ConsejoRegional_Key, c => c.Nombre);
        }
        await CargarDatos();
    }

    async Task CargarDatos()
    {
        estado = Estado.Cargando;
        try
        {
            usuarios = await Http.GetFromJsonAsync<List<Usuario>>("/api/usuario");
            estado = Estado.Listo;
        }
        catch (Exception ex)
        {
            mensajeError = ex.Message;
            estado = Estado.Error;
        }
    }

    void Editar(int id) => Nav.NavigateTo($"/admin/usuarios/{id}");

    async Task Eliminar(int id)
    {
        var confirmado = await JS.InvokeAsync<bool>("confirmarSweet", "¿Estás seguro?", "Esta acción no se puede deshacer");

        if (confirmado)
        {
            try
            {
                var resp = await Http.DeleteAsync($"/api/usuario/{id}");
                if (resp.IsSuccessStatusCode)
                {
                    await JS.InvokeVoidAsync("Swal.fire", new
                    {
                        icon = "success",
                        title = "Se elimino al usuario de manera correcta.",
                        showConfirmButton = false
                    });
                    await CargarDatos();
                }
                else
                {
                    await MostrarErrorSweetAlert("Error inesperado", resp.StatusCode.ToString());
                    //throw new ApplicationException($"Error {resp.StatusCode}");
                }
                
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("alert", $"No se pudo eliminar: {ex.Message}");
            }
        }
        // if (!await JS.InvokeAsync<bool>("confirm", $"¿Eliminar usuario {id}?")) return;
    }
    private async Task MostrarErrorSweetAlert(string titulo, string mensaje)
    {
        await JS.InvokeVoidAsync("Swal.fire", new
        {
            icon = "error",
            title = titulo,
            html = mensaje,
            confirmButtonText = "Aceptar"
        });
    }
}
