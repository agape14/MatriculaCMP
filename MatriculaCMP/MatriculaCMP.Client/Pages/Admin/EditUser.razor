@page "/admin/usuarios/new"
@page "/admin/usuarios/{Id:int?}"
@using MatriculaCMP.Shared

@inject HttpClient Http
@inject NavigationManager Nav
@inject IJSRuntime Js



@if (_cargando)
{
    <em>Cargando…</em>
}
else if (!string.IsNullOrEmpty(_error))
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @_error
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
<div class="container-fluid">
    <!-- start page title -->
    <div class="row">
        <div class="col-12">
            <div class="page-title-box d-sm-flex align-items-center justify-content-between">
                <h4 class="mb-sm-0">Usuarios</h4>

                <div class="page-title-right">
                    <ol class="breadcrumb m-0">
                        <li class="breadcrumb-item"><a href="javascript: void(0);">Inicio</a></li>
                        <li class="breadcrumb-item active">Usuarios / @(_id is null ? "Nuevo Usuario" : $"Editar Usuario")</li>
                    </ol>
                </div>

            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12">
            <div class="card">
                <h5 class="card-header card-title bg-primary">@(_id is null ? "Nuevo Usuario" : $"Editar Usuario")</h5>
                <div class="card-body  pt-0">
                    <EditForm Model="_model" OnValidSubmit="Guardar">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="row mt-2">
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label>N° Documento *</label>
                                    <InputText @bind-Value="_model.NumeroDocumento"
                                                class="form-control mb-2"
                                                placeholder="N° Documento" />
                                </div>
                            </div>
                            <div class="col-md-8">
                                <div class="form-group">
                                    <label>Correo</label>
                                    <InputText @bind-Value="_model.Correo"
                                                class="form-control mb-3"
                                                placeholder="Correo" />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label>Nombres *</label>
                                    <InputText @bind-Value="_model.Nombres"
                                                class="form-control mb-2"
                                                placeholder="Nombres" />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label>Apellido Paterno *</label>
                                    <InputText @bind-Value="_model.ApellidoPaterno"
                                                class="form-control mb-2"
                                                placeholder="Apellido Paterno" />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label>Apellido Materno *</label>
                                    <InputText @bind-Value="_model.ApellidoMaterno"
                                                class="form-control mb-2"
                                                placeholder="Apellido Materno" />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label>Usuario</label>
                                    <InputText @bind-Value="_model.NombreUsuario"
                                                class="form-control mb-3"
                                                placeholder="Nombre de usuario" />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label>Contraseña @(_id is null ? "*" : $"")</label>
                                    <InputText @bind-Value="_model.Password"
                                                class="form-control mb-3"
                                                placeholder="Contraseña" />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label>Perfil *</label>
                                    <InputSelect @bind-Value="_model.PerfilId" class="form-select mb-3">
                                        <option value="">--Seleccione--</option>
                                        @foreach (var p in _perfiles)
                                        {
                                            <option value="@p.Id">@p.Nombre</option>
                                        }
                                    </InputSelect>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group">
                                    <label for="lblConsejoRegional">Consejo Regional *</label>
                                    <InputSelect @bind-Value="_model.ConsejoRegionalId" class="form-control" id="cbxConsejoRegional" requiered>
                                        <option value="">Seleccione...</option>
                                        @foreach (var consejo in consejos)
                                        {
                                            <option value="@consejo.ConsejoRegional_Key">@consejo.Nombre</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => _model.ConsejoRegionalId)" />
                                </div>
                            </div>
                        </div>

                        <button class="btn btn-primary waves-effect waves-light" type="submit" disabled="@_guardando">
                            <i class="ri-save-line align-middle"></i> Guardar
                        </button>
                        <button class="btn btn-secondary waves-effect waves-light ms-2" type="button" @onclick="Volver">
                            <i class="ri-arrow-go-back-line"></i> Cancelar
                        </button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>
    


@code {
    // ------------------ parámetros y estado ------------------
    [Parameter] public int? Id { get; set; }

    private int? _id;                 // se copia en OnParametersSetAsync
    private UsuarioInsert _model = new();
    private List<Perfil> _perfiles = new();
    private List<Mat_ConsejoRegional> consejos = new();

    private bool _cargando = true;
    private bool _guardando = false;
    private string? _error;
    private string PersonaId;

    protected override async Task OnInitializedAsync()
	{
		try
		{
			consejos = await Http.GetFromJsonAsync<List<Mat_ConsejoRegional>>("api/consejoregional");
        }
        catch (Exception ex)
        {
            _error = $"Error al cargar los consejos regionales: {ex.Message}";
        }
    }
    // ------------------ ciclo de vida ------------------
    protected override async Task OnParametersSetAsync()
    {
        _id = Id;          // caches para usar en Save()
        _cargando = true;
        _error = null;

        try
        {
            // Descarga perfiles y (si aplica) el usuario en paralelo
            var perfilesTask = Http.GetFromJsonAsync<List<Perfil>>("/api/perfiles");
            var usuarioTask = _id is null
                ? Task.FromResult<UsuarioInsert?>(new UsuarioInsert())
                : Http.GetFromJsonAsync<UsuarioInsert>($"/api/usuario/{_id}");

            await Task.WhenAll(perfilesTask, usuarioTask);

            _perfiles = perfilesTask.Result ?? new();
            _model = usuarioTask.Result ?? new();
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _cargando = false;
        }
    }

    // ------------------ acciones ------------------
    async Task Guardar()
    {
        if (_guardando) return;
        _guardando = true;

        // Validación de contraseña solo si es nuevo
        if (_id is null && string.IsNullOrWhiteSpace(_model.Password))
        {
            await MostrarErrorTemporal("La contraseña es obligatoria para nuevos usuarios.");
            _guardando = false;
            return;
        }
        try
        {
            HttpResponseMessage resp = _id is null
                ? await Http.PostAsJsonAsync("/api/usuario", _model)
                : await Http.PutAsJsonAsync($"/api/usuario/{_id}", _model);

            if (!resp.IsSuccessStatusCode)
            {
                // _error = $"Error {(int)resp.StatusCode}: {await resp.Content.ReadAsStringAsync()}";
                // return;
                await MostrarErrorTemporal($"Error {(int)resp.StatusCode}: {await resp.Content.ReadAsStringAsync()}");
                return;
            }

            Volver(); // éxito → vuelve a la lista
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _guardando = false;
        }
    }

    void Volver() => Nav.NavigateTo("/admin/usuarios");

    private async Task MostrarErrorTemporal(string mensaje, int milisegundos = 5000)
    {
        _error = mensaje;
        StateHasChanged(); // refresca UI inmediatamente
        await Task.Delay(milisegundos);
        _error = null;
        StateHasChanged(); // vuelve a refrescar para ocultar
    }

}
