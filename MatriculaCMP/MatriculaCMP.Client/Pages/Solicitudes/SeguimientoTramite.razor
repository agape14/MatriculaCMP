@page "/solicitudes/seguimiento"
@using MatriculaCMP.Shared
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using MatriculaCMP.Client.Helpers

@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Nav
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="container-fluid">
	<!-- start page title -->
	<div class="row">
		<div class="col-12">
			<div class="page-title-box d-sm-flex align-items-center justify-content-between">
                <h4 class="mb-sm-0">Seguimiento Tramite</h4>

				<div class="page-title-right">
					<ol class="breadcrumb m-0">
						<li class="breadcrumb-item"><a href="javascript: void(0);">Inicio</a></li>
                        <li class="breadcrumb-item active">Seguimiento Tramite</li>
					</ol>
				</div>

			</div>
		</div>
	</div>

    <div class="row">
        <div class="col-lg-12">
            <div class="card">
                <div class="card-body  pt-0">
                    <ul class="nav nav-tabs nav-tabs-custom mb-4">
                        <li class="nav-item">
                            <a class="nav-link fw-bold p-3 active" href="#">Todos mis Trámites</a>
                        </li>
                    </ul>
                    <div class="alert alert-primary mb-2 mt-2" role="alert">
                        <div class="button-items">
                            @*
                            <button class="btn btn-primary waves-effect waves-light" @onclick="FirmarDigitalmente" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-original-title="Firmar Documento Digitalmente">
                                <i class="ri-fingerprint-fill align-middle me-2"></i> Firmar Digitalmente
                            </button>
                            <button type="button" class="btn btn-warning waves-effect waves-light" disabled>
                                <i class="ri-error-warning-line align-middle me-2"></i> Sub sanar
                            </button>
                             *@
                        </div>
                    </div>
                    <div class="table-responsive">
                        <div class="row">
                            <div class="col-sm-12">
                                <table id="tblListadoSolicitante" class="table table-centered datatable dt-responsive nowrap dataTable no-footer dtr-inline collapsed" data-page-length="5" style="border-collapse: collapse; border-spacing: 0px; width: 100%;" role="grid">
                                    <thead class="thead-light">
                                        <tr role="row">
                                            <th>#</th>
                                            <th>Nombres <br /> Completos</th>
                                            <th>Nro. <br /> Solicitud</th>
                                            <th>Fecha <br /> Solicitud</th>
                                            <th>Estado</th>
                                            <th>Área <br /> Encargada</th>
                                            <th>Observaciones</th>
                                            <th>Acciones</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @if (solicitudes != null && solicitudes.Count > 0)
                                        {
                                            int index = 1;
                                            foreach (var s in solicitudes)
                                            {
                                                <tr role="row" class="odd">
                                                    <td>@index</td>
                                                    <td>@s.PersonaNombre</td>
                                                    <td>@s.NumeroSolicitud.ToString("D8")</td>
                                                    <td>@s.FechaSolicitud.ToString("dd/MM/yyyy")</td>
                                                    <td>
                                                       @*  <span class="badge bg-@EstadoHelper.GetBadgeColor(s.EstadoId)">
                                                            @s.Estado
                                                        </span> *@
                                                        <div class="badge badge-soft-@s.EstadoColor font-size-12">@s.Estado</div>
                                                    </td>
                                                    <td>@(s.AreaNombre ?? "")</td>
                                                    <td>@(s.Observaciones ?? "")</td>
                                                    <td>
                                                        <button class="btn btn-outline-primary btn-sm" @onclick="@(() => VerDetalle(s))">
                                                            <i class="ri-eye-line"></i> Ver
                                                        </button>
                                                        @* <button class="btn btn-outline-warning btn-sm ms-1" @onclick="@(() => EditarSolicitud(s.Id))">
                                                <i class="ri-edit-line"></i> Editar
                                                </button> *@
                                                    </td>
                                                </tr>
                                                index++;
                                            }
                                        }
                                        else
                                        {
                                            <tr>
                                                <td colspan="7" class="text-center">No se encontraron solicitudes</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                   
                    <!-- Modal Loading -->
                    <div class="modal fade" id="loadingModal" tabindex="-1" aria-hidden="true">
                        <div class="modal-dialog modal-dialog-centered">
                            <div class="modal-content text-center p-4">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Cargando...</span>
                                </div>
                                <p class="mt-3">Descargando Formato...</p>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>

@if (solicitudSeleccionada != null)
{
    <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5)" id="detalleModal">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Detalle de Solicitud #@solicitudSeleccionada.NumeroSolicitud.ToString("D8")</h5>
                    <button type="button" class="btn-close" @onclick="() => solicitudSeleccionada = null"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h6>Datos Personales</h6>
                            <p><strong>Nombres:</strong> @solicitudSeleccionada.Persona.NombresCompletos</p>
                            <p><strong>Documento:</strong> @solicitudSeleccionada.Persona.NumeroDocumento</p>
                                <p><strong>Fecha Nacimiento:</strong> @solicitudSeleccionada.Persona.FechaNacimiento?.ToString("dd/MM/yyyy")</p>
                                <p><strong>Grupo Sanguíneo:</strong> @solicitudSeleccionada.Persona.GrupoSanguineo.Nombre</p>
                        </div>
                        <div class="col-md-6">
                            <h6>Contacto</h6>
                            <p><strong>Email:</strong> @solicitudSeleccionada.Persona.Email</p>
                                <p><strong>Celular:</strong> @solicitudSeleccionada.Persona.Celular</p>
                                <p><strong>Dirección:</strong> @solicitudSeleccionada.Persona.DescripcionZona</p>
                        </div>
                    </div>
                    
                    <div class="row mt-3">
                        <div class="col-md-6">
                            <h6>Educación</h6>
                                <p><strong>Universidad:</strong> @solicitudSeleccionada.Persona.Educaciones.FirstOrDefault()?.Universidad?.Nombre </p>
                                <p><strong>Fecha Título:</strong>  @solicitudSeleccionada.Persona.Educaciones.FirstOrDefault()?.FechaEmisionTitulo.ToString("dd/MM/yyyy") </p>
                        </div>
                        <div class="col-md-6">
                            <h6>Foto</h6>
                            @if (!string.IsNullOrEmpty(solicitudSeleccionada.Persona.FotoPath))
                            {
                                    <img src="/api/personaseducacion/fotos-medicos/@solicitudSeleccionada.Persona.FotoPath" class="img-thumbnail" style="max-width: 200px;" alt="Foto del médico" />
                            }
                            else
                            {
                                <p>Sin foto disponible</p>
                            }
                        </div>
                    </div>
                    
                    <div class="row mt-3">
                        <div class="col-12">
                            <h6>Estado</h6>
                               @*  <p><span class="badge bg-@EstadoHelper.GetBadgeColor(solicitudSeleccionada.EstadoSolicitud.Id)">@solicitudSeleccionada.EstadoSolicitud.Nombre</span></p> *@
                                <div class="badge badge-soft-@solicitudSeleccionada.EstadoSolicitud.Color font-size-12">@solicitudSeleccionada.EstadoSolicitud.Nombre</div>
                            <p><strong>Observaciones:</strong> @solicitudSeleccionada.Observaciones</p>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-12">
                            <h6>Título Médico Cirujano</h6>

                            @if (solicitudSeleccionada?.Persona?.Educaciones?.Any() == true)
                            {
                                var edu = solicitudSeleccionada.Persona.Educaciones
                                    .FirstOrDefault(e => !string.IsNullOrEmpty(e.Documento?.TituloMedicoCirujanoPath));

                                if (edu != null)
                                {
                                    var pdfUrl = $"/api/personaseducacion/documentos-educacion/{edu.Documento.TituloMedicoCirujanoPath}";


                                    <div class="mt-2">
                                        <a href="@pdfUrl" target="_blank" class="btn btn-primary">
                                            Abrir PDF en nueva pestaña
                                        </a>
                                    </div>
                                }
                                else
                                {
                                    <p>Sin documento disponible</p>
                                }
                            }
                            else
                            {
                                <p>Sin documento disponible</p>
                            }
                        </div>
                    </div>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => solicitudSeleccionada = null">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
}
</div>


@code {
    private bool seleccionarTodos = false;
    private List<PersonaConEducacionDto> personas = new();
    private List<SolicitudSeguimientoDto> solicitudes = new();
    private Solicitud? solicitudSeleccionada = null;
    private string personaId = "";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            personaId = user.FindFirst("PersonaId").Value ?? "0";
        }

        // personas = await Http.GetFromJsonAsync<List<PersonaConEducacionDto>>("api/personaseducacion/con-educacion");
        // solicitudes = await Http.GetFromJsonAsync<List<SolicitudSeguimientoDto>>($"api/personaseducacion/mis-solicitudes/{personaId}");
        // await InvokeAsync(StateHasChanged); // Forzar un re-renderizado

        if (!int.TryParse(personaId, out int personaIdInt))
        {
            Console.WriteLine("PersonaId inválido en claims aa.");
            return;
        }

        await CargarSolicitudes(personaIdInt);
    }

    
    private async Task CargarSolicitudes(int personaIdInt)
    {
        try
        {
            solicitudes = await Http.GetFromJsonAsync<List<SolicitudSeguimientoDto>>(
                $"api/personaseducacion/mis-solicitudes/{personaIdInt}");
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error en solicitud HTTP: {ex.Message}");
            // Aquí puedes manejar el error o mostrar mensaje en pantalla
        }
    }

    private async Task  VerDetalle(SolicitudSeguimientoDto solicitud)
    {
        solicitudSeleccionada = await Http.GetFromJsonAsync<Solicitud>($"api/personaseducacion/solicituddet/{solicitud.Id}");
    }
    private void EditarSolicitud(int solicitudId)
    {
        Nav.NavigateTo($"/solicitudes/prematricula/{solicitudId}");
    }
    private string GetBadgeColor(string estado)
    {
        return estado switch
        {
            "Registrado" => "primary",
            "Aprobado" => "success",
            "Rechazado" => "danger",
            "Observado" => "warning",
            _ => "secondary"
        };
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && solicitudes?.Count > 0) // Verificar que los datos están cargados
        {
            await JS.InvokeVoidAsync("inicializarDataTable", "#tblListadoSolicitante");
        }
    }
    private async Task ConfirmarEliminacion(int id)
    {
        var confirmado = await JS.InvokeAsync<bool>("confirmarSweet", "¿Estás seguro?", "Esta acción no se puede deshacer");

        if (confirmado)
        {
            // Eliminar lógica aquí
            Console.WriteLine($"Eliminado: {id}");
        }
    }

    private async Task DescargarFormato()
    {
        await JS.InvokeVoidAsync("mostrarModal", "#loadingModal");

        // Simular una descarga
        await Task.Delay(2000);

        await JS.InvokeVoidAsync("ocultarModal", "#loadingModal");

        // Aquí puedes agregar la lógica real de descarga
    }


    private void SeleccionarTodasFilas(ChangeEventArgs e)
    {
        seleccionarTodos = (bool)e.Value;
        foreach (var persona in personas)
        {
            persona.Seleccionado = seleccionarTodos;
        }
    }

    private async Task FirmarDigitalmente()
    {
        var seleccionados = personas.Where(a => a.Seleccionado).ToList();

        if (!seleccionados.Any())
        {
            await JS.InvokeVoidAsync("Swal.fire", new
            {
                icon = "warning",
                title = "Seleccione al menos un registro para firmar",
                showConfirmButton = true
            });
            return;
        }

        if (seleccionados.Count == 1)
        {
            await JS.InvokeVoidAsync("Swal.fire", new
            {
                icon = "success",
                title = $"Firma individual para: {seleccionados.First().NombresCompletos}",
                showConfirmButton = true
            });
        }
        else
        {
            await JS.InvokeVoidAsync("Swal.fire", new
            {
                icon = "info",
                title = $"Firma masiva para {seleccionados.Count} alumnos",
                showConfirmButton = true
            });
        }

        // Aquí iría tu lógica real de firma
    }

}

