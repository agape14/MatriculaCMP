@page "/solicitudes/prematricula"
@using MatriculaCMP.Client.Services
@using System.Net.Http.Headers;
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using MatriculaCMP.Shared
@using System.Text.Json


@inject IJSRuntime JS
@inject PaisUniversidadesService PaisUniversidadesService
@inject IMatriculaService MatriculaService
@inject NavigationManager Navigation
@inject HttpClient Http

<div class="container-fluid">
	<!-- start page title -->
	<div class="row">
		<div class="col-12">
			<div class="page-title-box d-sm-flex align-items-center justify-content-between">
				<h4 class="mb-sm-0">Ficha Pre-matricula</h4>
				<div class="page-title-right">
					<ol class="breadcrumb m-0">
						<li class="breadcrumb-item"><a href="javascript: void(0);">Inicio</a></li>
						<li class="breadcrumb-item active">Ficha Pre-matricula</li>
					</ol>
				</div>

			</div>
		</div>
	</div>
	<!-- end page title -->
	<div class="row">
		<div class="col-12">
			<div class="card">
				<div class="card-body">
					<div class="container-contact100">
						<div class="wrap-contact100">
							<EditForm Model="@formData" OnValidSubmit="@HandleValidSubmit">
								<div class="alert alert-info mb-4" role="alert">
									<center><b>******** Para el correcto funcionamiento de este servicio, utilizar el explorador Chrome. ********</b></center>
								</div>								
								 <div class="row">
									<div class="col-md-12">
										<div class="form-group">
											<label for="lblConsejoRegional">Consejo Regional *</label>
											<InputSelect @bind-Value="formData.ConsejoRegional" class="form-control" id="cbxConsejoRegional" requiered>
												<option value="">Seleccione...</option>
												@foreach (var consejo in consejos)
												{
													<option value="@consejo.ConsejoRegional_Key">@consejo.Nombre</option>
												}
											</InputSelect>
											<ValidationMessage For="@(() => formData.ConsejoRegional)" />
										</div>
									</div>
								</div>
								<div class="card">
									<h5 class="card-header card-title ">Datos Personales</h5>
									<div class="card-body">
										<div class="row">

											<div class="col-md-4">
												<div class="form-group">
													<label for="nombres">Nombres Completos *</label>
													<InputText @bind-Value="formData.Nombres" class="form-control" id="nombres" requiered />
													<ValidationMessage For="@(() => formData.Nombres)" />
												</div>
											</div>
											<div class="col-md-4">
												<div class="form-group">
													<label for="nombres">Apellido Paterno *</label>
													<InputText @bind-Value="formData.ApellidoPaterno" class="form-control" id="apaterno" requiered />
													<ValidationMessage For="@(() => formData.ApellidoPaterno)" />
												</div>
											</div>
											<div class="col-md-4">
												<div class="form-group">
													<label for="nombres">Apellido Materno *</label>
													<InputText @bind-Value="formData.ApellidoMaterno" class="form-control" id="amaterno" requiered />
													<ValidationMessage For="@(() => formData.ApellidoMaterno)" />
												</div>
											</div>

											<div class="col-md-6">
												<div class="form-group">
													<label for="sexo">Sexo *</label>
													<InputSelect @bind-Value="formData.Sexo" class="form-control" id="sexo">
														<option value="1">Masculino</option>
														<option value="0">Femenino</option>
													</InputSelect>
													<ValidationMessage For="@(() => formData.Sexo)" />
												</div>
											</div>
											<div class="col-md-6">
												<div class="form-group">
													<label for="ec">Estado Civil *</label>
													<InputSelect @bind-Value="formData.EstadoCivil" class="form-control" id="ec">
														<option value="">Seleccione...</option>
														@foreach (var ec in estacivil)
														{
															<option value="@ec.MaestroRegistro_Key">@ec.Nombre</option>
														}
													</InputSelect>
													<ValidationMessage For="@(() => formData.EstadoCivil)" />
												</div>
											</div>

											<div class="col-md-4">
												<div class="form-group">
													<label for="td">Tipo de Documento *</label>
													<InputSelect @bind-Value="formData.TipoDocumento" class="form-control" id="td">
														<option value="">Seleccione...</option>
														@foreach (var td in tipodoc)
														{
															<option value="@td.MaestroRegistro_Key">@td.Nombre</option>
														}
													</InputSelect>
													<ValidationMessage For="@(() => formData.TipoDocumento)" />
												</div>
											</div>
											<div class="col-md-4">
												<div class="form-group">
													<label for="nd">Nro. documento *</label>
													<InputText @bind-Value="formData.NumeroDocumento" class="form-control" id="nd" />
													<ValidationMessage For="@(() => formData.NumeroDocumento)" />
												</div>
											</div>
											<div class="col-md-4">
												<div class="form-group">
													<label for="gs">Grupo Sanguineo *</label>
													<InputSelect @bind-Value="formData.GrupoSanguineo" class="form-control" id="gs">
														<option value="">Seleccione...</option>
														@foreach (var gs in gruposang)
														{
															<option value="@gs.MaestroRegistro_Key">@gs.Nombre</option>
														}
													</InputSelect>
													<ValidationMessage For="@(() => formData.GrupoSanguineo)" />
												</div>
											</div>
										</div>
									</div>
								</div>
								<div class="card">
									<h5 class="card-header card-title">Datos de nacimiento</h5>
									<div class="card-body">
										<div class="row">
											<div class="col-md-3">
												<div class="form-group">
													<label for="pais">País *</label>
													<InputSelect @bind-Value="formData.PaisNacimiento" class="form-control" id="pais">
														<option value="">Seleccione Pais Nacimiento</option>
														@foreach (var pais in matpaises)
														{
															<option value="@pais.Pais_key" >
																@pais.Nombre
															</option>
														}
													</InputSelect>
													<ValidationMessage For="@(() => formData.PaisNacimiento)" />
												</div>
											</div>
											<div class="col-md-3">
												<div class="form-group">
													<label for="departamentonac">Departamento *</label>
													<InputSelect TValue="string"
													 Value="@formData.DepartamentoNacimiento"
													 ValueChanged="@((string val) => OnLoadProvincias(val))"
													 ValueExpression="@(() => formData.DepartamentoNacimiento)"
													 class="form-control">
														<option value="">Seleccione Departamento Nacimiento</option>
														@foreach (var depto in departamentos)
														{
															<option value="@depto.DepartamentoId">@depto.Nombre</option>
														}
													</InputSelect>

													<ValidationMessage For="@(() => formData.DepartamentoNacimiento)" />
												</div>
											</div>
											<div class="col-md-3">
												<div class="form-group">
													<label for="provincia">Provincia *</label>
													<InputSelect @bind-Value="formData.ProvinciaNacimiento" class="form-control" id="provincia"	 @onchange="LoadDistritos">
														<option value="">Seleccione Provincia Nacimiento</option>
														@foreach (var prov in provincias)
														{
															<option value="@prov.ProvinciaId">@prov.Nombre</option>
														}
													</InputSelect>
													<ValidationMessage For="@(() => formData.ProvinciaNacimiento)" />
												</div>
											</div>
											<div class="col-md-3">
												<div class="form-group">
													<label for="distrito">Distrito *</label>
													<InputSelect @bind-Value="formData.DistritoNacimiento" class="form-control" id="distrito">
														<option value="">Seleccione Distrito Nacimiento</option>
														@foreach (var dist in distritos)
														{
															<option value="@dist.UbigeoId">@dist.Nombre</option>
														}
													</InputSelect>
													<ValidationMessage For="@(() => formData.DistritoNacimiento)" />
												</div>
											</div>
											<div class="col-md-3">
												<div class="form-group">
													<label for="fnac">Fecha de Nacimiento *</label>
													<InputDate @bind-Value="formData.FechaNacimiento" class="form-control" id="fnac" />
													<ValidationMessage For="@(() => formData.FechaNacimiento)" />
												</div>
											</div>
										</div>
									</div>
								</div>

								<div class="card ">
									<h4 class="card-header card-title">Datos de domicilio</h4>
									<div class="card-body">
										<div class="row">
											<div class="col-md-6">
												<div class="form-group">
													<label for="zona">Zona *</label>
													<InputSelect @bind-Value="formData.ZonaDomicilio" class="form-control" id="zona">
														<option value="">Seleccione Zona Domicilio</option>
														@foreach (var zona in zonas)
														{
															<option value="@zona.MaestroRegistro_Key">@zona.Nombre</option>
														}
													</InputSelect>
													<ValidationMessage For="@(() => formData.ZonaDomicilio)" />
												</div>
											</div>
											<div class="col-md-6">
												<div class="form-group">
													<label for="domicilio1">Descripción Zona *</label>
													<InputText @bind-Value="formData.DescripcionZona" class="form-control" id="domicilio1" />
													<ValidationMessage For="@(() => formData.DescripcionZona)" />
												</div>
											</div>
											<div class="col-md-6">
												<div class="form-group">
													<label for="via">Vía *</label>
													<InputSelect @bind-Value="formData.ViaDomicilio" class="form-control" id="via">
														<option value="">Seleccione Via Domicilio</option>
														@foreach (var via in vias)
														{
															<option value="@via.MaestroRegistro_Key">@via.Nombre</option>
														}
													</InputSelect>
													<ValidationMessage For="@(() => formData.ViaDomicilio)" />
												</div>
											</div>
											<div class="col-md-6">
												<div class="form-group">
													<label for="domicilio1">Descripción Vía *</label>
													<InputText @bind-Value="formData.DescripcionVia" class="form-control" id="domicilio2" />
													<ValidationMessage For="@(() => formData.DescripcionVia)" />
												</div>
											</div>
											<div class="col-md-4">
												<div class="form-group">
													<label for="departamento_id">Departamento  *</label>
													<InputSelect @bind-Value="formData.DepartamentoDomicilio" class="form-control" id="departamento_id">
														<option value="">Seleccione Departamento Domicilio</option>
														<option value="14" selected>LIMA</option>
													</InputSelect>
													<ValidationMessage For="@(() => formData.DepartamentoDomicilio)" />
													
												</div>
											</div>
											<div class="col-md-4">
												<div class="form-group">
													<label for="provincia_id">Provincia *</label>
													<InputSelect @bind-Value="formData.ProvinciaDomicilio" class="form-control" id="provincia_id">
														<option value="">Seleccione Provincia Domicilio</option>
														<option value="1" selected>LIMA</option>
													</InputSelect>
													<ValidationMessage For="@(() => formData.ProvinciaDomicilio)" />
												</div>
											</div>
											<div class="col-md-4">
												<div class="form-group">
													<label for="distrito_id">Distrito *</label>
													<InputSelect @bind-Value="formData.DistritoDomicilio" class="form-control" id="distrito_id">
														<option value="">Seleccione Provincia Domicilio</option>
														<option value="1" selected>LIMA</option>
													</InputSelect>
													<ValidationMessage For="@(() => formData.DistritoDomicilio)" />
												</div>
											</div>
											<div class="col-md-4">
												<div class="form-group">
													<label for="telefono">Teléfono fijo</label>
													<InputText @bind-Value="formData.Telefono" class="form-control" id="telefono" />
													<ValidationMessage For="@(() => formData.Telefono)" />
												</div>
											</div>
											<div class="col-md-4">
												<div class="form-group">
													<label for="celular">Teléfono celular</label>
													<InputText @bind-Value="formData.Celular" class="form-control" id="celular" />
													<ValidationMessage For="@(() => formData.Celular)" />
												</div>
											</div>
											<div class="col-md-4">
												<div class="form-group">
													<label for="email">Correo *</label>
													<InputText @bind-Value="formData.Email" class="form-control" id="email" />
													<ValidationMessage For="@(() => formData.Email)" />
												</div>
											</div>
										</div>
									</div>
								</div>

								<div class="card">
									<h5 class="card-header card-title">Datos de Universidad</h5>
									<div class="card-body">
										<div class="row">
											<div class="col-md-6">
												<div class="form-group">
													<label for="uniori">Origen de Universidad *</label>
													<InputSelect @bind-Value="formData.UniversidadOrigen" class="form-control" @onchange="OnTipoSeleccionado" id="uniori">
														<option value="">Seleccione Universidad</option>
														<option value="1">Nacional</option>
														<option value="0">Extranjera</option>
													</InputSelect>
													<ValidationMessage For="@(() => formData.UniversidadOrigen)" />
												</div>
											</div>

											<div class="col-md-6">
												<div class="form-group">
													<label for="pais_uni">País de universidad *</label>
													<InputSelect @bind-Value="formData.PaisUniversidad" class="form-control" @onchange="OnPaisSeleccionado" id="pais_uni" disabled="@paisBloqueado">
														<option value="">Seleccione país</option>
														@foreach (var pais in paisesFiltrados)
														{
															<option value="@pais.Id" selected="@(pais.Id == paisId)">
																@pais.Nombre
															</option>
														}
													</InputSelect>
													<ValidationMessage For="@(() => formData.PaisUniversidad)" />
												</div>
											</div>

											<div class="col-md-6">
												<div class="form-group">
													<label for="nombre_uni">Nombre de Universidad*</label>
													<InputSelect @bind-Value="formData.Universidad" class="form-control" id="nombre_uni">
														<option value="">Seleccione Universidad</option>
														@foreach (var uni in universidades)
														{
															<option value="@uni.Id">@uni.Nombre</option>
														}
													</InputSelect>
													<ValidationMessage For="@(() => formData.Universidad)" />
												</div>
											</div>

											<div class="col-md-6">
												<div class="form-group">
													<label for="fegreso">Fecha de emisón del Título</label>
													<InputDate @bind-Value="formData.FechaEmisionTitulo" class="form-control" id="fegreso" />
													<ValidationMessage For="@(() => formData.FechaEmisionTitulo)" />
												</div>
											</div>
											@if (tipoSeleccionado == "0")
											{
												<div class="col-md-6">
													<div class="form-group">
														<label for="tipo_validacion">Tipo de validación *</label>
														<InputSelect @bind-Value="formData.TipoValidacion" class="form-control" id="tipo_validacion">
															<option value="">Seleccione opción</option>
															<option value="reconocimiento">Reconocimiento de Sunedu</option>
															<option value="revalidacion">Revalidación</option>
														</InputSelect>
														<ValidationMessage For="@(() => formData.TipoValidacion)" />
													</div>
												</div>
												@if (tipoValidacionExtranjera == "reconocimiento")
												{
													<div class="col-md-12">
														<div class="form-group">
															<label>Resolución de Reconocimiento *</label>
															<InputText @bind-Value="formData.NumeroResolucion" class="form-control" />
															<ValidationMessage For="@(() => formData.NumeroResolucion)" />
														</div>
														<div class="form-group">
															<label>Archivo Resolución PDF *</label>
															<InputFile  OnChange="@OnResolucionSelected" class="form-control" accept=".pdf" />
															@* <ValidationMessage For="@(() => formData.ResolucionPath)" /> *@
														</div>
													</div>
												}
												else if (tipoValidacionExtranjera == "revalidacion")
												{
													<div class="col-md-12">
														<div class="form-group">
															<label>Resolución de Reconocimiento *</label>
															<InputText @bind-Value="formData.NumeroResolucion" class="form-control" />
															<ValidationMessage For="@(() => formData.NumeroResolucion)" />
														</div>
														<div class="form-group">
															<label>Archivo Resolución PDF *</label>
															<InputFile OnChange="@OnResolucionSelected" class="form-control" accept=".pdf" />
															@* <ValidationMessage For="@(() => formData.ResolucionPath)" /> *@
														</div>
														<div class="form-group">
															<label>Universidad Peruana *</label>
															<InputSelect @bind-Value="formData.UniversidadPeruana" class="form-control">
																<option value="">Seleccione universidad</option>
																@foreach (var uniper in universidadesperuanas)
																{
																	<option value="@uniper.Id">@uniper.Nombre</option>
																}
															</InputSelect>
															<ValidationMessage For="@(() => formData.UniversidadPeruana)" />
														</div>
													</div>
												}
											}
											<div class="col-md-12">
												<div class="form-group">
													<h4 class="card-title">Adjuntar Foto</h4>
													<div class="custom-file">
														<div class="input-group">
															<div class="custom-file" style="flex-grow: 1;">
																<InputFile OnChange="@OnFotoSelected" @bind-Value="formData.FotoMedico" class="custom-file-input form-control" accept=".jpg,.jpeg,.png" id="customFile" />
																<label class="custom-file-label form-control" for="customFile">@(fotoFile != null ? fotoFile.Name : "Seleccione foto")</label>
															</div>
															<button type="button" class="btn btn-outline-primary" @onclick="() => mostrarEjemplos = true" style="border-top-left-radius: 0; border-bottom-left-radius: 0;">
																<i class="fas fa-question-circle"></i> Ver ejemplos
															</button>
														</div>
														@if (mostrarEjemplos)
														{
															<div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5)" id="exampleModal">
																<div class="modal-dialog modal-lg">
																	<div class="modal-content">
																		<div class="modal-header">
																			<h5 class="modal-title">Ejemplos de fotos válidas</h5>
																			<button type="button" class="btn-close" @onclick="() => mostrarEjemplos = false"></button>
																		</div>
																		<div class="modal-body">
																			<div class="row">
																				<div class="col-md-6">
																					<h6>Ejemplo para caballeros</h6>
																					<img src="@GetImageUrl("hombre_formal.jpg")" class="img-fluid border" alt="Ejemplo hombre formal" style="height:350px" />
																				</div>
																				<div class="col-md-6">
																					<h6>Ejemplo para damas</h6>
																					<img src="@GetImageUrl("mujer_formal.jpg")" class="img-fluid border" alt="Ejemplo mujer formal" style="height:350px"/>
																				</div>
																			</div>
																			<div class="mt-3 alert alert-info">
																				<h6>Requisitos:</h6>
																				<ul>
																					<li>Fondo blanco o claro uniforme</li>
																					<li>Rostro completamente visible</li>
																					<li>Postura frontal</li>
																					<li>Vestimenta formal (caballeros: terno y corbata; damas: blusa/vestido formal)</li>
																				</ul>
																			</div>
																		</div>
																		<div class="modal-footer">
																			<button type="button" class="btn btn-secondary" @onclick="() => mostrarEjemplos = false">Cerrar</button>
																		</div>
																	</div>
																</div>
															</div>
														}
														<!-- Vista previa de la imagen -->
														@if (fotoFile != null && imagePreviewUrl != null)
														{
															<div class="mt-3">
																<img src="@imagePreviewUrl" class="img-thumbnail" style="max-width: 200px; max-height: 200px;" alt="Vista previa de la imagen seleccionada" />
															</div>
														}
    
														<!-- Mensajes de estado -->
														<div class="mt-2">
															@if (estaValidando)
															{
																<div class="spinner-border text-primary" role="status">
																	<span class="visually-hidden">Cargando...</span>
																</div>
																<span class="ms-2">@mensajeValidacion</span>
															}
															else if (mostrarErrorFoto)
															{
																<div class="text-danger">@mensajeValidacion</div>
															}
															else if (!string.IsNullOrEmpty(mensajeValidacion))
															{
																<div class="text-success">@mensajeValidacion</div>
															}
														</div>
														<ValidationMessage For="@(() => formData.FotoMedico)" />
													</div>
													<div class="alert alert-warning mb-4 mt-2" role="alert">
														<ul>
															<li>
																Adjuntar foto tamaño pasaporte a color en fondo blanco <em>(caballeros: terno y corbata; damas: con blusa de vestir) </em> *
															</li>
															<li>
																Debe de ser un solo archivo en formato <strong>JPG</strong> y deberá pesar hasta <strong>25MB</strong>
															</li>
														</ul>
													</div>
												</div>
											</div>
											<div class="col-md-12">
												<div class="form-group">
													<div class="custom-control custom-switch mb-2" dir="ltr">
														<InputCheckbox @bind-Value="formData.AceptaPoliticas" class="custom-control-input" id="customSwitch1" />
														<label class="custom-control-label" for="customSwitch1">Acepto las <a href="/Politicas_de_privacidad">Políticas de Privacidad</a> de este sitio</label>
														<ValidationMessage For="@(() => formData.AceptaPoliticas)" />
													</div>
												</div>
											</div>

										</div>
									</div>
								</div>
							
								<DataAnnotationsValidator />
								<ValidationSummary />
								<!-- Mostrar mensajes de error -->
								@if (!string.IsNullOrEmpty(mensajeError))
								{
									<div class="alert alert-danger">@mensajeError</div>
								}
								<button type="submit" disabled="@(!formularioEsValido || enviando)" class="btn btn-primary btn-lg btn-block waves-effect waves-light mb-1">
									@if (enviando)
									{
										<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
										<span> Procesando...</span>
									}
									else
									{
										<span>Enviar Solicitud</span>
										<i class="ri-arrow-right-line align-middle ml-2"></i>
									}
								</button>
								

							</EditForm>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>

</div>

@code {
	string tipoSeleccionado = "1"; // Nacional por defecto
	int paisId;
	bool paisBloqueado = true;
	string tipoValidacionExtranjera = "";

	List<Pais> paises = new();
	List<Pais> paisesFiltrados = new();
	List<Universidad> universidades = new();
	List<Universidad> universidadesperuanas = new();

	//Guardar Formulario
	private FormData formData = new FormData();
	private EditContext editContext;
	private MatriculaRequest MatriculaRequestModel = new MatriculaRequest();
	private List<Mat_ConsejoRegional> consejos = new();
	private List<MaestroRegistro> estacivil = new();
	private List<MaestroRegistro> tipodoc = new();
	private List<MaestroRegistro> gruposang = new();
	private List<MaestroRegistro> zonas = new();
	private List<MaestroRegistro> vias = new();
	private List<Mat_Pais> matpaises = new();

	private IBrowserFile fotoFile;
	private string? imagePreviewUrl;
	private IBrowserFile resolucionFile;
	private string mensajeError;
	private bool enviando = false;
	private bool mostrarErrorFoto = false;
	private bool estaValidando = false;
	private string mensajeValidacion = string.Empty;
	private bool mostrarEjemplos = false;
	private bool formularioEsValido = false;

	private List<Mat_Ubigeo> departamentos = new List<Mat_Ubigeo>();
	private List<Mat_Ubigeo> provincias = new List<Mat_Ubigeo>();
	private List<Mat_Ubigeo> distritos = new List<Mat_Ubigeo>();
	private string selectedDepartamento;
	private string selectedProvincia;

	private async Task OnFotoSelected(InputFileChangeEventArgs e)
	{
		try
		{
			// Resetear estados y vista previa
			imagePreviewUrl = null;
			fotoFile = null;
			estaValidando = true;
			mensajeValidacion = "Validando imagen...";
			mostrarErrorFoto = false;
			StateHasChanged(); // Forzar actualización de la UI

			fotoFile = e.File;

			// Validación básica del archivo antes de enviar
			if (fotoFile == null || fotoFile.Size == 0)
			{
				mostrarErrorFoto = true;
				mensajeValidacion = "El archivo está vacío";
				return;
			}

			// Validar tipo de archivo
			var allowedExtensions = new[] { ".jpg", ".jpeg", ".png" };
			var fileExtension = Path.GetExtension(fotoFile.Name).ToLowerInvariant();
			if (!allowedExtensions.Contains(fileExtension))
			{
				mostrarErrorFoto = true;
				mensajeValidacion = "Formato no soportado. Use JPG, JPEG o PNG";
				return;
			}

			// Validar tamaño (ejemplo: máximo 4MB)
			if (fotoFile.Size > 4 * 1024 * 1024)
			{
				mostrarErrorFoto = true;
				mensajeValidacion = "La imagen no debe exceder 4MB";
				return;
			}

			// Generar vista previa antes de enviar a la API
			var format = "image/jpeg"; // o "image/png" según necesites
			var resizedImage = await fotoFile.RequestImageFileAsync(format, 300, 300);
			var buffer = new byte[resizedImage.Size];
			await resizedImage.OpenReadStream().ReadAsync(buffer);
			imagePreviewUrl = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
			StateHasChanged(); // Actualizar para mostrar vista previa

			using var content = new MultipartFormDataContent();
			using var stream = fotoFile.OpenReadStream(maxAllowedSize: 4 * 1024 * 1024); // 4MB
			content.Add(new StreamContent(stream), "file", fotoFile.Name);

			var response = await Http.PostAsync("api/FotoValidator/validar", content);

			if (!response.IsSuccessStatusCode)
			{
				mostrarErrorFoto = true;
				mensajeValidacion = "Error al validar la imagen";
				return;
			}

			var resultJson = await response.Content.ReadAsStringAsync();
			var result = JsonSerializer.Deserialize<FotoValidationResult>(resultJson);

			if (result == null)
			{
				mostrarErrorFoto = true;
				mensajeValidacion = "Respuesta inválida del servidor";
				return;
			}

			// Evaluar respuesta completa del JSON
			if (result.valido)
			{
				mostrarErrorFoto = false;
				mensajeValidacion = "✓ Imagen válida";
				formData.FotoMedico = fotoFile;
			}
			else
			{
				mostrarErrorFoto = true;
				mensajeValidacion = result.mensaje ?? "La imagen no cumple los requisitos";
				formData.FotoMedico = null;
				// Opcional: limpiar vista previa si no es válida
				// imagePreviewUrl = null;
			}
		}
		catch (Exception ex)
		{
			mostrarErrorFoto = true;
			mensajeValidacion = "Error al procesar la imagen";
			imagePreviewUrl = null; // Limpiar vista previa en caso de error
			Console.WriteLine($"Error: {ex.Message}");
		}
		finally
		{
			enviando = false;
			estaValidando = false;
			StateHasChanged(); // Actualizar UI al finalizar
		}
	}

	// Clase para deserializar la respuesta JSON
	public class FotoValidationResult
	{
		public string? genero { get; set; }
		public bool valido { get; set; }
		public string? mensaje { get; set; }
	}

	protected override async Task OnInitializedAsync()
	{
		consejos = await Http.GetFromJsonAsync<List<Mat_ConsejoRegional>>("api/consejoregional");
		tipodoc = await Http.GetFromJsonAsync<List<MaestroRegistro>>("/api/MaestroRegistro/id/23");
		estacivil = await Http.GetFromJsonAsync<List<MaestroRegistro>>("/api/MaestroRegistro/id/21");
		gruposang = await Http.GetFromJsonAsync<List<MaestroRegistro>>("/api/MaestroRegistro/id/19");
		zonas = await Http.GetFromJsonAsync<List<MaestroRegistro>>("/api/MaestroRegistro/id/17");
		vias = await Http.GetFromJsonAsync<List<MaestroRegistro>>("/api/MaestroRegistro/id/16");
		matpaises = await Http.GetFromJsonAsync<List<Mat_Pais>>("/api/MatPais");
		departamentos = await Http.GetFromJsonAsync<List<Mat_Ubigeo>>("api/MatUbigeo/departamentos");

		paises = await PaisUniversidadesService.ObtenerPaisesAsync();
		var peru = paises.FirstOrDefault(p => p.Nombre.ToLower().Contains("perú"));
		if (peru != null)
		{
			paisId = peru.Id;
		}

		paisesFiltrados = paises; // Inicialmente todos, pero se ajusta más abajo

		// Initialize with default values if needed
		formData.ConsejoRegional = "3";
		formData.Nombres = "Agapito";
		formData.ApellidoPaterno = "De la cruz";
		formData.ApellidoMaterno = "Carlos";
		formData.PaisNacimiento = "356";
		formData.NumeroDocumento = "45742029";
		formData.DepartamentoNacimiento = "1";
		formData.ProvinciaNacimiento = "1";
		formData.DistritoNacimiento = "1";
		formData.DescripcionZona = "Zona";
		formData.DescripcionVia = "Via";
		formData.DepartamentoDomicilio = "14";
		formData.Telefono = "4526544";
		formData.Celular = "981525451";
		formData.Email = "adelacruzcarlos@gmail.com";
		formData.ProvinciaDomicilio = "1";
		formData.DistritoDomicilio = "1";
		formData.AceptaPoliticas = true;
		formData.UniversidadOrigen = "1";

		editContext = new EditContext(formData);
		// editContext.OnFieldChanged += async (_, __) => await VerificarFormularioValido();
		// await VerificarFormularioValido();

		await CargarUniversidades();
		await CargarUniversidadesPeruanas();
	}

	// private async Task VerificarFormularioValido()
	// {
	// 	formularioEsValido = editContext.Validate();
	// 	await InvokeAsync(StateHasChanged);
	// }

	async Task OnTipoSeleccionado(ChangeEventArgs e)
	{
		tipoSeleccionado = e.Value?.ToString() ?? "1";

		if (tipoSeleccionado == "1") // Nacional
		{
			paisBloqueado = true;

			var peru = paises.FirstOrDefault(p => p.Nombre.ToLower().Contains("perú"));
			if (peru != null)
			{
				paisId = peru.Id;
			}

			paisesFiltrados = paises.Where(p => p.Nombre.ToLower().Contains("perú")).ToList();
		}
		else // Extranjera
		{
			paisBloqueado = false;

			paisesFiltrados = paises
				.Where(p => !p.Nombre.ToLower().Contains("perú"))
				.ToList();

			paisId = 0; // resetear
		}

		await CargarUniversidades();
		// 🔄 Forzar re-render
		StateHasChanged();

		// 🕒 Esperar a que se actualice el DOM
		await Task.Delay(1);

		// ✅ Destruir y reiniciar select2
		// await JS.InvokeVoidAsync("select2interop.refresh", "#pais_uni");
		// await JS.InvokeVoidAsync("select2interop.refresh", "#nombre_uni");
		
	}

	async Task OnPaisSeleccionado(ChangeEventArgs e)
	{
		if (int.TryParse(e.Value?.ToString(), out int id))
		{
			paisId = id;
			universidades = await PaisUniversidadesService.ObtenerUniversidadesAsync(paisId);
		}
	}

	async Task CargarUniversidades()
	{
		if (paisId > 0)
		{
			universidades = await PaisUniversidadesService.ObtenerUniversidadesAsync(paisId);
		}
		else
		{
			universidades = new();
		}
		// await JS.InvokeVoidAsync("select2interop.refresh", "#pais_uni");
		// await JS.InvokeVoidAsync("select2interop.refresh", "#nombre_uni");
	}

	async Task CargarUniversidadesPeruanas()
	{
		
		var peruselect = paises.FirstOrDefault(p => p.Nombre.ToLower().Contains("perú"));
		
		universidadesperuanas = await PaisUniversidadesService.ObtenerUniversidadesAsync(peruselect.Id);
	}

	private async Task OnLoadProvincias(string selected)
	{
		formData.DepartamentoNacimiento = selected;
		provincias = await Http.GetFromJsonAsync<List<Mat_Ubigeo>>($"api/MatUbigeo/provincias/{selected}");
	}
	// async Task OnLoadProvincias(ChangeEventArgs e)
	// {
	// 	selectedDepartamento = e.Value?.ToString();
	// 	formData.DepartamentoDomicilio = selectedDepartamento;

	// 	if (!string.IsNullOrEmpty(selectedDepartamento))
	// 	{
	// 		provincias = await Http.GetFromJsonAsync<List<Mat_Ubigeo>>($"api/Ubigeo/provincias/{selectedDepartamento}");
	// 		selectedProvincia = null;
	// 		distritos.Clear();
	// 	}
	// 	else
	// 	{
	// 		provincias.Clear();
	// 		distritos.Clear();
	// 	}
	// }

	async Task LoadDistritos(ChangeEventArgs e)
	{
		selectedProvincia = e.Value?.ToString();
		formData.ProvinciaDomicilio = selectedProvincia;

		if (!string.IsNullOrEmpty(selectedDepartamento) && !string.IsNullOrEmpty(selectedProvincia))
		{
			distritos = await Http.GetFromJsonAsync<List<Mat_Ubigeo>>(
				$"api/Ubigeo/distritos/{selectedDepartamento}/{selectedProvincia}");
		}
		else
		{
			distritos.Clear();
		}
	}
	 public class SelectListItem
    {
        public string Value { get; set; }
        public string Text { get; set; }
    }

	private async Task HandleValidSubmit()
	{
		try
		{
			// Validación básica de archivos
			if (fotoFile == null)
			{
				mostrarErrorFoto = true;
				mensajeError = "Debe seleccionar una foto válida";
				return;
			}

			// Validación de campos obligatorios
			// var validationErrors = ValidateForm();
			// if (validationErrors.Any())
			// {
			// 	mensajeError = string.Join("<br>", validationErrors);
			// 	return;
			// }

			// Mapeo a modelos
			var persona = new Persona
				{
					ConsejoRegionalId = formData.ConsejoRegional,
					Nombres = formData.Nombres?.Trim(),
					ApellidoPaterno = formData.ApellidoPaterno?.Trim(),
					ApellidoMaterno = formData.ApellidoMaterno?.Trim(),
					EstadoCivilId = formData.EstadoCivil,
					TipoDocumentoId = formData.TipoDocumento,
					NumeroDocumento = formData.NumeroDocumento?.Trim(),
					GrupoSanguineoId = formData.GrupoSanguineo,
					PaisNacimientoId = formData.PaisNacimiento,
					DepartamentoNacimientoId = formData.DepartamentoNacimiento,
					ProvinciaNacimientoId = formData.ProvinciaNacimiento,
					DistritoNacimientoId = formData.DistritoNacimiento,
					FechaNacimiento = formData.FechaNacimiento,
					ZonaDomicilioId = formData.ZonaDomicilio,
					DescripcionZona = formData.DescripcionZona?.Trim(),
					ViaDomicilioId = formData.ViaDomicilio,
					DescripcionVia = formData.DescripcionVia?.Trim(),
					DepartamentoDomicilioId = formData.DepartamentoDomicilio,
					ProvinciaDomicilioId = formData.ProvinciaDomicilio,
					DistritoDomicilioId = formData.DistritoDomicilio,
					Telefono = formData.Telefono?.Trim(),
					Celular = formData.Celular?.Trim(),
					Email = formData.Email?.Trim().ToLower(),
					AceptaPoliticas = formData.AceptaPoliticas,
					FotoMedico=formData.FotoMedico
				};

			var educacion = new Educacion
				{
					UniversidadOrigen=formData.UniversidadOrigen,
					UniversidadId = int.Parse(formData.Universidad),
					FechaEmisionTitulo = formData.FechaEmisionTitulo,
					PaisUniversidadId = int.TryParse(formData.PaisUniversidad, out var paisId) ? paisId : 0,
					TipoValidacion = formData.TipoValidacion,
					NumeroResolucion = formData.NumeroResolucion?.Trim(),
					UniversidadPeruanaId = int.TryParse(formData.UniversidadPeruana, out var uniId) ? uniId : null
				};
			// Serializar objetos a JSON
			string personaJson = JsonSerializer.Serialize(persona);
			string educacionJson = JsonSerializer.Serialize(educacion);

			// Crear contenido multipart
			using var content = new MultipartFormDataContent();

			// Agregar datos JSON
			content.Add(new StringContent(personaJson), "Persona");
			content.Add(new StringContent(educacionJson), "Educacion");

			// Agregar archivo de foto
			var fotoContent = new StreamContent(fotoFile.OpenReadStream());
			fotoContent.Headers.ContentType = new MediaTypeHeaderValue(fotoFile.ContentType); // Usa 'new' aquí
			content.Add(fotoContent, "Foto", fotoFile.Name);

			// Agregar resolución si es necesario
			if (formData.UniversidadOrigen == "0" && resolucionFile != null)
			{
				var resolucionContent = new StreamContent(resolucionFile.OpenReadStream());
				resolucionContent.Headers.ContentType = new MediaTypeHeaderValue(resolucionFile.ContentType);
				content.Add(resolucionContent, "ResolucionFile", resolucionFile.Name);
			}

			// Realizar petición HTTP
			var response = await Http.PostAsync("api/matricula/guardar", content);

			if (response.IsSuccessStatusCode)
			{
				var result = await response.Content.ReadFromJsonAsync<ResponseModel>();

				if (result?.Success == true)
				{
					await JS.InvokeVoidAsync("Swal.fire", new
					{
						title = "Éxito",
						text = result?.Message,
						icon = "success"
					});

					LimpiarFormulario();
				}
				else
				{
					await JS.InvokeVoidAsync("Swal.fire", new
					{
						title = "Error",
						text = result?.Message ?? "Ocurrió un error al guardar los datos",
						icon = "error"
					});
				}
			}
			else
			{
				var errorContent = await response.Content.ReadAsStringAsync();
				var errorMessage = $"Error: {response.StatusCode}";

				try
				{
					// Intentar deserializar el error como un objeto { message }
					var errorObj = JsonSerializer.Deserialize<ResponseModel>(errorContent);
					if (!string.IsNullOrEmpty(errorObj?.Message))
					{
						errorMessage = errorObj.Message;
					}
				}
				catch
				{
					// Si no se puede deserializar, usar el contenido como texto plano
					if (!string.IsNullOrEmpty(errorContent))
					{
						errorMessage += $" - {errorContent}";
					}
				}

				await JS.InvokeVoidAsync("Swal.fire", new
				{
					title = "Error",
					text = errorMessage,
					icon = "error"
				});
			}
		}
		catch (Exception ex)
		{
			mensajeError = $"Error inesperado: {ex.Message}";
			Console.WriteLine($"Error en HandleSubmit: {ex}");
		}
		finally
		{
			enviando = false;
			StateHasChanged();
		}
	}

	private void LimpiarFormulario()
	{
		formData = new FormData();
		// editContext = new EditContext(formData);
		// editContext.OnFieldChanged += async (_, __) => await VerificarFormularioValido();

		fotoFile = null;
		resolucionFile = null;
		imagePreviewUrl = null;
		mensajeError = string.Empty;
		mensajeValidacion = string.Empty;
		mostrarErrorFoto = false;

		StateHasChanged();
	}

	public class ResponseModel
	{
		public bool Success { get; set; }
		public string? Message { get; set; }
	}
	// Clase para manejar la respuesta
	public class ApiResponse
	{
		public string message { get; set; }
	}

	private void OnResolucionSelected(InputFileChangeEventArgs e)
	{
		resolucionFile = e.File;
	}
		

	private string GetImageUrl(string imageName)
	{
		return $"/api/fotovalidator/reference-image/{imageName}";
	}
}

