@page "/solicitudes/prematricula"
@using MatriculaCMP.Client.Services
@using MatriculaCMP.Shared
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Web
@using System.Text.Json

@inject IJSRuntime JS
@inject PaisUniversidadesService PaisUniversidadesService
@inject IMatriculaService MatriculaService
@inject NavigationManager Navigation
@inject HttpClient Http

<div class="container-fluid">
	<!-- start page title -->
	<div class="row">
		<div class="col-12">
			<div class="page-title-box d-sm-flex align-items-center justify-content-between">
				<h4 class="mb-sm-0">Ficha Pre-matricula</h4>

				<div class="page-title-right">
					<ol class="breadcrumb m-0">
						<li class="breadcrumb-item"><a href="javascript: void(0);">Inicio</a></li>
						<li class="breadcrumb-item active">Ficha Pre-matricula</li>
					</ol>
				</div>

			</div>
		</div>
	</div>
	<!-- end page title -->

	<div class="row">
		<div class="col-12">
			<div class="card">
				<div class="card-body">
					<div class="container-contact100">
						<div class="wrap-contact100">
							<EditForm Model="@formData" OnValidSubmit="@HandleSubmit">
								
								<div class="alert alert-info mb-4" role="alert">
									<center><b>******** Para el correcto funcionamiento de este servicio, utilizar el explorador Chrome. ********</b></center>
								</div>

								
								<div class="row">
									<div class="col-md-12">
										<div class="form-group">
											<label for="lblConsejoRegional">Consejo Regional *</label>
											@* <select class="form-control select2" name="cbxConsejoRegional" tabindex="-1" aria-hidden="true">
												<option value="1">CONSEJO REGIONAL I  LA LIBERTAD</option>
												<option value="2">CONSEJO REGIONAL II  IQUITOS</option>
												<option value="3">CONSEJO REGIONAL III  LIMA</option>
												<option value="4">CONSEJO REGIONAL IV  JUNIN</option>
												<option value="9">CONSEJO REGIONAL IX  ICA</option>
												<option value="5">CONSEJO REGIONAL V  AREQUIPA</option>
												<option value="6">CONSEJO REGIONAL VI  CUZCO</option>
												<option value="7">CONSEJO REGIONAL VII  PIURA</option>
												<option value="8">CONSEJO REGIONAL VIII  CHICLAYO</option>
												<option value="10">CONSEJO REGIONAL X  HUANUCO</option>
												<option value="11">CONSEJO REGIONAL XI  HUARAZ</option>
												<option value="12">CONSEJO REGIONAL XII  TACNA</option>
												<option value="13">CONSEJO REGIONAL XIII  PUCALLPA</option>
												<option value="14">CONSEJO REGIONAL XIV  PUNO</option>
												<option value="19">CONSEJO REGIONAL XIX  CHIMBOTE</option>
												<option value="15">CONSEJO REGIONAL XV  SAN MARTIN</option>
												<option value="16">CONSEJO REGIONAL XVI  AYACUCHO</option>
												<option value="17">CONSEJO REGIONAL XVII  CAJAMARCA</option>
												<option value="18">CONSEJO REGIONAL XVIII  CALLAO</option>
												<option value="20">CONSEJO REGIONAL XX  PASCO</option>
												<option value="21">CONSEJO REGIONAL XXI  MOQUEGUA</option>
												<option value="22">CONSEJO REGIONAL XXII  APURIMAC</option>
												<option value="23">CONSEJO REGIONAL XXIII  TUMBES</option>
												<option value="24">CONSEJO REGIONAL XXIV  HUANCAVELICA</option>
												<option value="25">CONSEJO REGIONAL XXV  AMAZONAS</option>
												<option value="26">CONSEJO REGIONAL XXVI  MADRE DE DIOS</option>
												<option value="27">CONSEJO REGIONAL XXVII  LIMA-PROVINCIAS</option>
											</select> *@

											<InputSelect @bind-Value="formData.ConsejoRegional" class="form-control" id="cbxConsejoRegional">
												<option value="">Seleccione...</option>
												@foreach (var consejo in ConsejosRegionales)
												{
													<option value="@consejo.Value">@consejo.Text</option>
												}
											</InputSelect>
											<ValidationMessage For="@(() => formData.ConsejoRegional)" />
										</div>
									</div>					
									@* <div class="col-md-12">
										<div class="form-group">
											<label for="lblConsejoRegional">Consejo Regional *</label>

										</div>
									</div> *@
								</div>
								<div class="card">
									<h5 class="card-header card-title ">Datos Personales</h5>
									<div class="card-body">
										<div class="row">

											<div class="col-md-4">
												<div class="form-group">
													<label for="nombres">Nombres Completos *</label>
													@* <input class="form-control" type="text" name="nombres" placeholder="Ingrese su nombre" maxlength="50"> *@
													<InputText @bind-Value="formData.Nombres" class="form-control" id="nombres" />
													<ValidationMessage For="@(() => formData.Nombres)" />
												</div>
											</div>
											<div class="col-md-4">
												<div class="form-group">
													<label for="nombres">Apellido Paterno *</label>
													@* <input class="form-control" type="text" name="apaterno" placeholder="Ingrese su apellido paterno" maxlength="50"> *@
													<InputText @bind-Value="formData.ApellidoPaterno" class="form-control" id="apaterno" />
													<ValidationMessage For="@(() => formData.ApellidoPaterno)" />
												</div>
											</div>
											<div class="col-md-4">
												<div class="form-group">
													<label for="nombres">Apellido Materno *</label>
													@* <input class="form-control" type="text" name="amaterno" placeholder="Ingrese su apellido materno" maxlength="50"> *@
													<InputText @bind-Value="formData.ApellidoMaterno" class="form-control" id="amaterno" />
													<ValidationMessage For="@(() => formData.ApellidoMaterno)" />
												</div>
											</div>

											<div class="col-md-6">
												<div class="form-group">
													<label for="sexo">Sexo *</label>
													@* 
													<select class="form-control select2" name="sexo" tabindex="-1" aria-hidden="true">
													</select> *@
													<InputSelect @bind-Value="formData.Sexo" class="form-control" id="sexo">
														<option value="1">Masculino</option>
														<option value="0">Femenino</option>
													</InputSelect>
													<ValidationMessage For="@(() => formData.Sexo)" />
												</div>
											</div>
											<div class="col-md-6">
												<div class="form-group">
													<label for="ec">Estado Civil *</label>
													@* <select class="form-control select2" name="ec" tabindex="-1" aria-hidden="true">
													</select> *@

													<InputSelect @bind-Value="formData.EstadoCivil" class="form-control" id="ec">
														<option value="70">Casado</option>
														<option value="73">Conviviente</option>
														<option value="72">Divorciado</option>
														<option value="69">Soltero</option>
														<option value="71">Viudo</option>
													</InputSelect>
													<ValidationMessage For="@(() => formData.EstadoCivil)" />
												</div>
											</div>

											<div class="col-md-4">
												<div class="form-group">
													<label for="td">Tipo de Documento *</label>
													@* <select class="form-control select2" name="td" tabindex="-1" aria-hidden="true">
													</select> *@

													<InputSelect @bind-Value="formData.TipoDocumento" class="form-control" id="td">
														<option value="64">Carnet Extranjeria</option>
														<option value="62" selected>DNI</option>
													</InputSelect>
													<ValidationMessage For="@(() => formData.TipoDocumento)" />
												</div>
											</div>
											<div class="col-md-4">
												<div class="form-group">
													<label for="nd">Nro. documento *</label>
													@* <input class="form-control" type="text" name="nd" placeholder="Ingrese su nro documento" maxlength="20"> *@
													<InputText @bind-Value="formData.NumeroDocumento" class="form-control" id="nd" />
													<ValidationMessage For="@(() => formData.NumeroDocumento)" />
												</div>
											</div>
											<div class="col-md-4">
												<div class="form-group">
													<label for="gs">Grupo Sanguineo *</label>
													@* <select class="form-control select2" name="gs" tabindex="-1" aria-hidden="true">
													</select> *@
													<InputSelect @bind-Value="formData.GrupoSanguineo" class="form-control" id="gs">
														<option value="173">A+</option>
														<option value="174">A-</option>
														<option value="171">AB+</option>
														<option value="172">AB-</option>
														<option value="175">B+</option>
														<option value="176">B-</option>
														<option value="177">O+</option>
														<option value="178">O-</option>
													</InputSelect>
													<ValidationMessage For="@(() => formData.GrupoSanguineo)" />
												</div>
											</div>
										</div>
									</div>
								</div>
								<div class="card">
									<h5 class="card-header card-title">Datos de nacimiento</h5>
									<div class="card-body">
										<div class="row">
											<div class="col-md-3">
												<div class="form-group">
													<label for="pais">País *</label>
													<InputSelect @bind-Value="formData.PaisNacimiento" class="form-control" id="pais">
														<option value="">Seleccione país</option>
														@foreach (var pais in paises)
														{
															<option value="@pais.Id" >
																@pais.Nombre
															</option>
														}
													</InputSelect>
													<ValidationMessage For="@(() => formData.PaisNacimiento)" />
												</div>
											</div>
											<div class="col-md-3">
												<div class="form-group">
													<label for="departamento">Departamento *</label>
													@* <select id="departamento" class="form-control select2" name="departamento">
													</select> *@
													<InputSelect @bind-Value="formData.DepartamentoNacimiento" class="form-control" id="departamento">
														<option value="">Seleccione Departamento Nacimiento</option>
														<option value="1">LIMA</option>
													</InputSelect>
													<ValidationMessage For="@(() => formData.DepartamentoNacimiento)" />
												</div>
											</div>
											<div class="col-md-3">
												<div class="form-group">
													<label for="provincia">Provincia *</label>
													@* <select id="provincia" class="form-control select2" name="provincia">
													</select> *@
													<InputSelect @bind-Value="formData.ProvinciaNacimiento" class="form-control" id="provincia">
														<option value="">Seleccione Provincia Nacimiento</option>
														<option value="1">LIMA</option>
													</InputSelect>
													<ValidationMessage For="@(() => formData.ProvinciaNacimiento)" />
												</div>
											</div>
											<div class="col-md-3">
												<div class="form-group">
													<label for="distrito">Distrito *</label>
													@* <select id="distrito" class="form-control select2" name="distrito">
													</select> *@
													<InputSelect @bind-Value="formData.DistritoNacimiento" class="form-control" id="distrito">
														<option value="">Seleccione DistritoNacimiento</option>
														<option value="1">LIMA</option>
													</InputSelect>
													<ValidationMessage For="@(() => formData.DistritoNacimiento)" />
												</div>
											</div>
											<div class="col-md-3">
												<div class="form-group">
													<label for="fnac">Fecha de Nacimiento *</label>
													@* <input class="form-control" type="date" name="fnac" placeholder="Ingrese su fecha de nacimiento"> *@
													<InputDate @bind-Value="formData.FechaNacimiento" class="form-control" id="fnac" />
													<ValidationMessage For="@(() => formData.FechaNacimiento)" />
												</div>
											</div>
										</div>
									</div>
								</div>

								<div class="card ">
									<h4 class="card-header card-title">Datos de domicilio</h4>
									<div class="card-body">
										<div class="row">
											<div class="col-md-6">
												<div class="form-group">
													<label for="zona">Zona *</label>
													@* <select class="form-control select2" name="zona" tabindex="-1" aria-hidden="true">
													</select> *@

													<InputSelect @bind-Value="formData.ZonaDomicilio" class="form-control" id="zona">
														<option value="">Seleccione Zona Domicilio</option>
														<option value="8">ASENTAMIENTO HUMANO</option>
														<option value="9">ASOCIACION</option>
														<option value="10">CONDOMINIO</option>
														<option value="11">CONJUNTO  HABITACIONAL</option>
														<option value="580">COOPERATIVA</option>
														<option value="587">OTRO</option>
														<option value="579">PUEBLO JOVEN</option>
														<option value="12">RESIDENCIAL</option>
														<option value="14">UNIDAD VECINAL</option>
														<option value="13">URBANIZACION</option>
													</InputSelect>
													<ValidationMessage For="@(() => formData.ZonaDomicilio)" />
												</div>
											</div>
											<div class="col-md-6">
												<div class="form-group">
													<label for="domicilio1">Descripción Zona *</label>
													@* <input class="form-control" type="text" name="domicilio1" placeholder="Ingrese su Zona" maxlength="100"> *@
													<InputText @bind-Value="formData.DescripcionZona" class="form-control" id="domicilio1" />
													<ValidationMessage For="@(() => formData.DescripcionZona)" />
												</div>
											</div>
											<div class="col-md-6">
												<div class="form-group">
													<label for="via">Vía *</label>
													@* <select class="form-control select2" name="via" tabindex="-1" aria-hidden="true">
													</select> *@

													<InputSelect @bind-Value="formData.ViaDomicilio" class="form-control" id="via">
														<option value="">Seleccione Via Domicilio</option>
														<option value="1">AVENIDA</option>
														<option value="2">BARRIO</option>
														<option value="3">CALLE</option>
														<option value="4">JIRON</option>
														<option value="578">MALECON</option>
														<option value="6">PASAJE</option>
													</InputSelect>
													<ValidationMessage For="@(() => formData.ViaDomicilio)" />
												</div>
											</div>
											<div class="col-md-6">
												<div class="form-group">
													<label for="domicilio1">Descripción Vía *</label>
													@* <input class="form-control" type="text" name="domicilio2" placeholder="Ingrese su Vía" maxlength="100"> *@
													<InputText @bind-Value="formData.DescripcionVia" class="form-control" id="domicilio2" />
													<ValidationMessage For="@(() => formData.DescripcionVia)" />
												</div>
											</div>
											<div class="col-md-4">
												<div class="form-group">
													<label for="departamento_id">Departamento  *</label>
													<InputSelect @bind-Value="formData.DepartamentoDomicilio" class="form-control" id="departamento_id">
														<option value="">Seleccione Departamento Domicilio</option>
														<option value="14" selected>LIMA</option>
													</InputSelect>
													<ValidationMessage For="@(() => formData.DepartamentoDomicilio)" />
													
												</div>
											</div>
											<div class="col-md-4">
												<div class="form-group">
													<label for="provincia_id">Provincia *</label>
													@* <select id="provincia_id" class="form-control" name="provincia_id" required="">
													</select> *@

													<InputSelect @bind-Value="formData.ProvinciaDomicilio" class="form-control" id="provincia_id">
														<option value="">Seleccione Provincia Domicilio</option>
														<option value="1" selected>LIMA</option>
													</InputSelect>
													<ValidationMessage For="@(() => formData.ProvinciaDomicilio)" />
												</div>
											</div>
											<div class="col-md-4">
												<div class="form-group">
													<label for="distrito_id">Distrito *</label>
													@* <select id="distrito_id" class="form-control" name="distrito_id" required="">
													</select> *@

													<InputSelect @bind-Value="formData.DistritoDomicilio" class="form-control" id="distrito_id">
														<option value="">Seleccione Provincia Domicilio</option>
														<option value="1" selected>LIMA</option>
													</InputSelect>
													<ValidationMessage For="@(() => formData.DistritoDomicilio)" />
												</div>
											</div>
											<div class="col-md-4">
												<div class="form-group">
													<label for="telefono">Teléfono fijo</label>
													@* <input class="form-control" type="text" name="telefono" placeholder="Ingrese su telefono fijo" maxlength="10">
 *@
													<InputText @bind-Value="formData.Telefono" class="form-control" id="telefono" />
													<ValidationMessage For="@(() => formData.Telefono)" />
												</div>
											</div>
											<div class="col-md-4">
												<div class="form-group">
													<label for="celular">Teléfono celular</label>
													@* <input class="form-control"  type="text" name="celular" placeholder="Ingrese su telefono celular" maxlength="10">
 *@
													<InputText @bind-Value="formData.Celular" class="form-control" id="celular" />
													<ValidationMessage For="@(() => formData.Celular)" />
												</div>
											</div>
											<div class="col-md-4">
												<div class="form-group">
													<label for="email">Correo *</label>
													@* <input class="form-control" type="email" name="email" placeholder="Ingrese su correo" maxlength="100"> *@
													<InputText @bind-Value="formData.Email" class="form-control" id="email" />
													<ValidationMessage For="@(() => formData.Email)" />
												</div>
											</div>
										</div>
									</div>
								</div>

								<div class="card">
									<h5 class="card-header card-title">Datos de Universidad</h5>
									<div class="card-body">
										<div class="row">
											<div class="col-md-6">
												<div class="form-group">
													<label for="uniori">Origen de Universidad *</label>
													<select id="uniori" class="form-control select2" name="uniori" @onchange="OnTipoSeleccionado">
														<option value="1" selected>Nacional</option>
														<option value="0">Extranjera</option>
													</select>
												</div>
											</div>

											<div class="col-md-6">
												<div class="form-group">
													<label for="pais_uni">País de universidad *</label>
													<select id="pais_uni" class="form-control select2" name="pais_uni"
															@onchange="OnPaisSeleccionado" disabled="@paisBloqueado">
														<option value="">Seleccione país</option>
														@foreach (var pais in paisesFiltrados)
														{
															<option value="@pais.Id" selected="@(pais.Id == paisId)">
																@pais.Nombre
															</option>
														}
													</select>
												</div>
											</div>

											<div class="col-md-6">
												<div class="form-group">
													<label for="nombre_uni">Nombre de Universidad*</label>
													@* <select id="nombre_uni" class="form-control select2" name="nombre_uni" required>														
													</select> *@


													<InputSelect @bind-Value="formData.Universidad" class="form-control" id="nombre_uni">
														<option value="">Seleccione Universidad</option>
														@foreach (var uni in universidades)
														{
															<option value="@uni.Id">@uni.Nombre</option>
														}
													</InputSelect>
													<ValidationMessage For="@(() => formData.Universidad)" />
												</div>
											</div>

											<div class="col-md-6">
												<div class="form-group">
													<label for="fegreso">Fecha de emisón del Título</label>
													<input class="form-control" type="date" name="fegreso" placeholder="fecha de emisión del título">
												</div>
											</div>
											@if (tipoSeleccionado == "0")
											{
												<div class="col-md-6">
													<div class="form-group">
														<label for="tipo_validacion">Tipo de validación *</label>
														<select id="tipo_validacion" class="form-control select2" @bind="tipoValidacionExtranjera">
															<option value="">Seleccione opción</option>
															<option value="reconocimiento">Reconocimiento de Sunedu</option>
															<option value="revalidacion">Revalidación</option>
														</select>
													</div>
												</div>

												@if (tipoValidacionExtranjera == "reconocimiento")
												{
													<div class="col-md-12">
														<div class="form-group">
															<label>Resolución de Reconocimiento *</label>
															<input type="text" class="form-control" placeholder="Número de resolución">
														</div>
														<div class="form-group">
															<label>Archivo Resolución PDF *</label>
															@* <input type="file" class="form-control" accept=".pdf"> *@
															<InputFile OnChange="@OnResolucionSelected" class="form-control"  accept=".pdf" />
														</div>
													</div>
												}
												else if (tipoValidacionExtranjera == "revalidacion")
												{
													<div class="col-md-12">
														<div class="form-group">
															<label>Resolución de Revalidación *</label>
															<input type="text" class="form-control" placeholder="Número de resolución">
														</div>
														<div class="form-group">
															<label>Archivo Resolución PDF *</label>
															@* <input type="file" class="form-control" accept=".pdf"> *@
															<InputFile OnChange="@OnResolucionSelected" class="form-control" accept=".pdf" />
														</div>
														<div class="form-group">
															<label>Universidad Peruana *</label>
															<select class="form-control select2" id="universidad_peruana" name="universidad_peruana">
																<option value="">Seleccione universidad</option>
																@foreach (var uniper in universidadesperuanas)
																{
																	<option value="@uniper.Id">@uniper.Nombre</option>
																}
															</select>
														</div>

													</div>
												}
											}

											<div class="col-md-12">
												<div class="form-group">
													<h4 class="card-title">Adjuntar Foto</h4>
													<div class="custom-file">
														@* <input type="file" class="custom-file-input" id="customFile"> *@
														<div class="custom-file">
															<InputFile OnChange="@OnFotoSelected" class="custom-file-input" accept=".jpg,.jpeg" />
															<label class="custom-file-label" for="customFile">Seleccione foto</label>
															<div class="mt-2">
																@if (estaValidando)
																{
																	<div class="spinner-border text-primary" role="status">
																		<span class="visually-hidden">Cargando...</span>
																	</div>
																	<span class="ms-2">@mensajeValidacion</span>
																}
																else if (mostrarErrorFoto)
																{
																	<div class="text-danger">@mensajeValidacion</div>
																}
																else if (!string.IsNullOrEmpty(mensajeValidacion))
																{
																	<div class="text-success">@mensajeValidacion</div>
																}
															</div>
															<ValidationMessage For="@(() => formData.FotoMedico)" />
														</div>
													</div>
													<div class="alert alert-warning mb-4 mt-2" role="alert">
														<ul>
															<li>
																Adjuntar foto tamaño pasaporte a color en fondo blanco <em>(caballeros: terno y corbata; damas: con blusa de vestir) </em> *
															</li>
															<li>
																Debe de ser un solo archivo en formato <strong>JPG</strong> y deberá pesar hasta <strong>25MB</strong>
															</li>
														</ul>
													</div>
												</div>
											</div>
											<div class="col-md-12">
												<div class="form-group">
													<div class="custom-control custom-switch mb-2" dir="ltr">
														@* <input type="checkbox" class="custom-control-input" id="customSwitch1" checked=""> *@
														<InputCheckbox @bind-Value="formData.AceptaPoliticas" class="custom-control-input" id="customSwitch1" />
														<label class="custom-control-label" for="customSwitch1">Acepto las <a href="/Politicas_de_privacidad">Políticas de Privacidad</a> de este sitio</label>
														<ValidationMessage For="@(() => formData.AceptaPoliticas)" />
													</div>
												</div>
											</div>

										</div>
									</div>
								</div>
								@* <button type="button" class="btn btn-primary btn-lg btn-block waves-effect waves-light mb-1">
									Enviar Solicitud
									<i class="ri-arrow-right-line align-middle ml-2"></i>
								</button> *@
								<DataAnnotationsValidator />
								<ValidationSummary />
								<!-- Mostrar mensajes de error -->
								@if (!string.IsNullOrEmpty(mensajeError))
								{
									<div class="alert alert-danger">@mensajeError</div>
								}
								<button type="submit" disabled="@enviando" class="btn btn-primary btn-lg btn-block waves-effect waves-light mb-1">
									@if (enviando)
									{
										<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
										<span> Procesando...</span>
									}
									else
									{
										<span>Enviar Solicitud</span>
										<i class="ri-arrow-right-line align-middle ml-2"></i>
									}
								</button>
								

							</EditForm>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>

</div>

@code {
	string tipoSeleccionado = "1"; // Nacional por defecto
	int paisId;
	bool paisBloqueado = true;
	string tipoValidacionExtranjera = "";

	List<Pais> paises = new();
	List<Pais> paisesFiltrados = new();
	List<Universidad> universidades = new();
	List<Universidad> universidadesperuanas = new();

	//Guardar Formulario
	private FormData formData = new FormData();
	private IBrowserFile fotoFile;
	private IBrowserFile resolucionFile;
	private string mensajeError;
	private bool enviando = false;
	private bool mostrarErrorFoto = false;
	private bool estaValidando = false;
	private string mensajeValidacion = string.Empty;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await JS.InvokeVoidAsync("select2interop.init", "#pais_uni");
			await JS.InvokeVoidAsync("select2interop.init", "#nombre_uni");
			await JS.InvokeVoidAsync("select2interop.init", "#universidad_peruana");
		}
	}

	private async Task OnFotoSelected(InputFileChangeEventArgs e)
	{
		try
		{
			// Iniciar estado de carga
			estaValidando = true;
			mensajeValidacion = "Validando imagen...";
			mostrarErrorFoto = false;
			StateHasChanged(); // Forzar actualización de la UI

			fotoFile = e.File;

			// Validación básica del archivo antes de enviar
			if (fotoFile == null || fotoFile.Size == 0)
			{
				mostrarErrorFoto = true;
				mensajeValidacion = "El archivo está vacío";
				return;
			}

			// Validar tipo de archivo
			var allowedExtensions = new[] { ".jpg", ".jpeg", ".png" };
			var fileExtension = Path.GetExtension(fotoFile.Name).ToLowerInvariant();
			if (!allowedExtensions.Contains(fileExtension))
			{
				mostrarErrorFoto = true;
				mensajeValidacion = "Formato no soportado. Use JPG, JPEG o PNG";
				return;
			}

			// Validar tamaño (ejemplo: máximo 4MB)
			if (fotoFile.Size > 4 * 1024 * 1024)
			{
				mostrarErrorFoto = true;
				mensajeValidacion = "La imagen no debe exceder 4MB";
				return;
			}

			using var content = new MultipartFormDataContent();
			using var stream = fotoFile.OpenReadStream(maxAllowedSize: 4 * 1024 * 1024); // 4MB
			content.Add(new StreamContent(stream), "file", fotoFile.Name);

			var response = await Http.PostAsync("api/FotoValidator/validar", content);

			if (!response.IsSuccessStatusCode)
			{
				mostrarErrorFoto = true;
				mensajeValidacion = "Error al validar la imagen";
				return;
			}

			var resultJson = await response.Content.ReadAsStringAsync();
			var result = JsonSerializer.Deserialize<FotoValidationResult>(resultJson);

			if (result == null)
			{
				mostrarErrorFoto = true;
				mensajeValidacion = "Respuesta inválida del servidor";
				return;
			}

			// Evaluar respuesta completa del JSON
			if (result.valido)
			{
				mostrarErrorFoto = false;
				mensajeValidacion = "✓ Imagen válida";
				formData.FotoMedico = fotoFile;
			}
			else
			{
				mostrarErrorFoto = true;
				mensajeValidacion = result.mensaje ?? "La imagen no cumple los requisitos";
				formData.FotoMedico = null;
			}
		}
		catch (Exception ex)
		{
			mostrarErrorFoto = true;
			mensajeValidacion = "Error al procesar la imagen";
			Console.WriteLine($"Error: {ex.Message}");
		}
		finally
		{
			estaValidando = false;
			StateHasChanged(); // Actualizar UI al finalizar
		}
	}

	// Clase para deserializar la respuesta JSON
	public class FotoValidationResult
	{
		public string? genero { get; set; }
		public bool valido { get; set; }
		public string? mensaje { get; set; }
	}

	protected override async Task OnInitializedAsync()
	{
		paises = await PaisUniversidadesService.ObtenerPaisesAsync();
		var peru = paises.FirstOrDefault(p => p.Nombre.ToLower().Contains("perú"));
		if (peru != null)
		{
			paisId = peru.Id;
		}

		paisesFiltrados = paises; // Inicialmente todos, pero se ajusta más abajo
		formData.ConsejoRegional = "3";
		formData.Nombres = "Agapito";
		formData.ApellidoPaterno="De la cruz";
		formData.ApellidoMaterno = "Carlos";
		formData.PaisNacimiento = "356";
		formData.NumeroDocumento = "45742029";

		formData.DepartamentoNacimiento = "1";
		formData.ProvinciaNacimiento = "1";
		formData.DistritoNacimiento = "1";

		formData.DescripcionZona = "Zona";
		formData.DescripcionVia = "Via";
		formData.DepartamentoDomicilio = "14";
		formData.Telefono = "4526544";
		formData.Celular = "981525451";
		formData.Email = "adelacruzcarlos@gmail.com";
		formData.ProvinciaDomicilio="1";
		formData.DistritoDomicilio="1";
		formData.AceptaPoliticas = true;
		await CargarUniversidades();
		await CargarUniversidadesPeruanas();
	}

	async Task OnTipoSeleccionado(ChangeEventArgs e)
	{
		tipoSeleccionado = e.Value?.ToString() ?? "1";

		if (tipoSeleccionado == "1") // Nacional
		{
			paisBloqueado = true;

			var peru = paises.FirstOrDefault(p => p.Nombre.ToLower().Contains("perú"));
			if (peru != null)
			{
				paisId = peru.Id;
			}

			paisesFiltrados = paises.Where(p => p.Nombre.ToLower().Contains("perú")).ToList();
		}
		else // Extranjera
		{
			paisBloqueado = false;

			paisesFiltrados = paises
				.Where(p => !p.Nombre.ToLower().Contains("perú"))
				.ToList();

			paisId = 0; // resetear
		}

		await CargarUniversidades();
		// 🔄 Forzar re-render
		StateHasChanged();

		// 🕒 Esperar a que se actualice el DOM
		await Task.Delay(1);

		// ✅ Destruir y reiniciar select2
		await JS.InvokeVoidAsync("select2interop.refresh", "#pais_uni");
		await JS.InvokeVoidAsync("select2interop.refresh", "#nombre_uni");
		
	}

	async Task OnPaisSeleccionado(ChangeEventArgs e)
	{
		if (int.TryParse(e.Value?.ToString(), out int id))
		{
			paisId = id;
			universidades = await PaisUniversidadesService.ObtenerUniversidadesAsync(paisId);
		}
	}

	async Task CargarUniversidades()
	{
		if (paisId > 0)
		{
			universidades = await PaisUniversidadesService.ObtenerUniversidadesAsync(paisId);
		}
		else
		{
			universidades = new();
		}
		await JS.InvokeVoidAsync("select2interop.refresh", "#pais_uni");
		await JS.InvokeVoidAsync("select2interop.refresh", "#nombre_uni");
	}

	async Task CargarUniversidadesPeruanas()
	{
		
		var peruselect = paises.FirstOrDefault(p => p.Nombre.ToLower().Contains("perú"));
		
		universidadesperuanas = await PaisUniversidadesService.ObtenerUniversidadesAsync(peruselect.Id);
	}

	 public class SelectListItem
    {
        public string Value { get; set; }
        public string Text { get; set; }
    }

	// Luego declara la lista
	private List<SelectListItem> ConsejosRegionales = new List<SelectListItem>
	{
		new SelectListItem { Value = "1", Text = "CONSEJO REGIONAL I - LA LIBERTAD" },
		new SelectListItem { Value = "2", Text = "CONSEJO REGIONAL II - IQUITOS" },
        // Agrega todos los consejos regionales
        new SelectListItem { Value = "3", Text = "CONSEJO REGIONAL III - LIMA" },
		new SelectListItem { Value = "4", Text = "CONSEJO REGIONAL IV - JUNIN" },
		new SelectListItem { Value = "9", Text = "CONSEJO REGIONAL IX - ICA" },
		new SelectListItem { Value = "5", Text = "CONSEJO REGIONAL V - AREQUIPA" },
		new SelectListItem { Value = "6", Text = "CONSEJO REGIONAL VI - CUZCO" },
		new SelectListItem { Value = "7", Text = "CONSEJO REGIONAL VII - PIURA" },
		new SelectListItem { Value = "8", Text = "CONSEJO REGIONAL VIII - CHICLAYO" },
		new SelectListItem { Value = "10", Text = "CONSEJO REGIONAL X - HUANUCO" },
		new SelectListItem { Value = "11", Text = "CONSEJO REGIONAL XI - HUARAZ" },
		new SelectListItem { Value = "12", Text = "CONSEJO REGIONAL XII - TACNA" },
		new SelectListItem { Value = "13", Text = "CONSEJO REGIONAL XIII - PUCALLPA" },
		new SelectListItem { Value = "14", Text = "CONSEJO REGIONAL XIV - PUNO" },
		new SelectListItem { Value = "19", Text = "CONSEJO REGIONAL XIX - CHIMBOTE" },
		new SelectListItem { Value = "15", Text = "CONSEJO REGIONAL XV - SAN MARTIN" },
		new SelectListItem { Value = "16", Text = "CONSEJO REGIONAL XVI - AYACUCHO" },
		new SelectListItem { Value = "17", Text = "CONSEJO REGIONAL XVII - CAJAMARCA" },
		new SelectListItem { Value = "18", Text = "CONSEJO REGIONAL XVIII - CALLAO" },
		new SelectListItem { Value = "20", Text = "CONSEJO REGIONAL XX - PASCO" },
		new SelectListItem { Value = "21", Text = "CONSEJO REGIONAL XXI - MOQUEGUA" },
		new SelectListItem { Value = "22", Text = "CONSEJO REGIONAL XXII - APURIMAC" },
		new SelectListItem { Value = "23", Text = "CONSEJO REGIONAL XXIII - TUMBES" },
		new SelectListItem { Value = "24", Text = "CONSEJO REGIONAL XXIV - HUANCAVELICA" },
		new SelectListItem { Value = "25", Text = "CONSEJO REGIONAL XXV - AMAZONAS" },
		new SelectListItem { Value = "26", Text = "CONSEJO REGIONAL XXVI - MADRE DE DIOS" },
		new SelectListItem { Value = "27", Text = "CONSEJO REGIONAL XXVII - LIMA-PROVINCIAS" }
	};

	//Guardar Formulario
	private async Task HandleSubmit()
	{
		enviando = true;
		mensajeError = null;

		// Validar archivos
		if (fotoFile == null)
		{
			//mensajeError = "Debe seleccionar una foto";
			mostrarErrorFoto = true;
			enviando = false;
			return;
		}

		// Mapear a modelos
		var persona = new Persona
			{
				// Mapeo de propiedades desde formData
				ConsejoRegionalId = int.Parse(formData.ConsejoRegional),
				Nombres = formData.Nombres,
				ApellidoPaterno = formData.ApellidoPaterno,
				ApellidoMaterno = formData.ApellidoMaterno,
				EstadoCivilId = int.Parse(formData.EstadoCivil),
				TipoDocumentoId = int.Parse(formData.TipoDocumento),
				NumeroDocumento = formData.NumeroDocumento,
				GrupoSanguineoId = int.Parse(formData.GrupoSanguineo),
				PaisNacimientoId = int.Parse(formData.PaisNacimiento),
				DepartamentoNacimientoId = int.Parse(formData.DepartamentoNacimiento),
				ProvinciaNacimientoId = int.Parse(formData.ProvinciaNacimiento),
				DistritoNacimientoId = int.Parse(formData.DistritoNacimiento),
				FechaNacimiento = formData.FechaNacimiento,
				ZonaDomicilioId = int.Parse(formData.ZonaDomicilio),
				DescripcionZona = formData.DescripcionZona,
				ViaDomicilioId = int.Parse(formData.ViaDomicilio),
				DescripcionVia = formData.DescripcionVia,
				DepartamentoDomicilioId = int.Parse(formData.DepartamentoDomicilio),
				ProvinciaDomicilioId = int.Parse(formData.ProvinciaDomicilio),
				DistritoDomicilioId = int.Parse(formData.DistritoDomicilio),
				Telefono = formData.Telefono,
				Celular = formData.Celular,
				Email = formData.Email
			};

		if (!int.TryParse(formData.Universidad, out var universidadId))
		{
			mensajeError = "Debe seleccionar una universidad válida.";
			enviando = false;
			return;
		}

		int.TryParse(formData.PaisUniversidad, out var paisUniversidadId);
		int.TryParse(formData.UniversidadPeruana, out var universidadPeruanaId); // opcional

		var educacion = new Educacion
			{
				UniversidadId = universidadId,
				FechaEmisionTitulo = formData.FechaEmisionTitulo,
				PaisUniversidadId = paisUniversidadId,
				TipoValidacion = formData.TipoValidacion,
				NumeroResolucion = formData.NumeroResolucion,
				UniversidadPeruanaId = universidadPeruanaId
			};


		// Llamar al servicio
		var (success, message) = await MatriculaService.GuardarMatriculaAsync(
			persona,
			educacion,
			fotoFile,
			formData.UniversidadOrigen == "0" ? resolucionFile : null);

		if (success)
		{
			Navigation.NavigateTo("/solicitudes/confirmacion");
		}
		else
		{
			mensajeError = message;
		}

		enviando = false;
	}

	private void OnResolucionSelected(InputFileChangeEventArgs e)
	{
		resolucionFile = e.File;
	}

	public class FormData
	{
		// Datos del Consejo Regional
		[Required(ErrorMessage = "El consejo regional es requerido")]
		public string ConsejoRegional { get; set; }

		// Datos Personales
		[Required(ErrorMessage = "Los nombres son requeridos")]
		[StringLength(50, ErrorMessage = "Los nombres no pueden exceder los 50 caracteres")]
		public string Nombres { get; set; }

		[Required(ErrorMessage = "El apellido paterno es requerido")]
		[StringLength(50, ErrorMessage = "El apellido paterno no puede exceder los 50 caracteres")]
		public string ApellidoPaterno { get; set; }

		[Required(ErrorMessage = "El apellido materno es requerido")]
		[StringLength(50, ErrorMessage = "El apellido materno no puede exceder los 50 caracteres")]
		public string ApellidoMaterno { get; set; }

		[Required(ErrorMessage = "El sexo es requerido")]
		public string Sexo { get; set; } = "1"; // Valor por defecto Masculino

		[Required(ErrorMessage = "El estado civil es requerido")]
		public string EstadoCivil { get; set; } = "69"; // Valor por defecto Soltero

		// Datos de Documento
		[Required(ErrorMessage = "El tipo de documento es requerido")]
		public string TipoDocumento { get; set; } = "62"; // Valor por defecto DNI

		[Required(ErrorMessage = "El número de documento es requerido")]
		[StringLength(20, ErrorMessage = "El número de documento no puede exceder los 20 caracteres")]
		[RegularExpression(@"^\d+$", ErrorMessage = "El número de documento debe contener solo dígitos")]
		public string NumeroDocumento { get; set; }

		[Required(ErrorMessage = "El grupo sanguíneo es requerido")]
		public string GrupoSanguineo { get; set; } = "177"; // Valor por defecto O+

		// Datos de Nacimiento
		[Required(ErrorMessage = "El país de nacimiento es requerido")]
		public string PaisNacimiento { get; set; }

		[Required(ErrorMessage = "El departamento de nacimiento es requerido")]
		public string DepartamentoNacimiento { get; set; }

		[Required(ErrorMessage = "La provincia de nacimiento es requerida")]
		public string ProvinciaNacimiento { get; set; }

		[Required(ErrorMessage = "El distrito de nacimiento es requerido")]
		public string DistritoNacimiento { get; set; }

		[Required(ErrorMessage = "La fecha de nacimiento es requerida")]
		public DateTime FechaNacimiento { get; set; } = DateTime.Today.AddYears(-18); // Valor por defecto 18 años atrás

		// Datos de Domicilio
		[Required(ErrorMessage = "La zona de domicilio es requerida")]
		public string ZonaDomicilio { get; set; } = "8"; // Valor por defecto ASENTAMIENTO HUMANO

		[Required(ErrorMessage = "La descripción de zona es requerida")]
		[StringLength(100, ErrorMessage = "La descripción de zona no puede exceder los 100 caracteres")]
		public string DescripcionZona { get; set; }

		[Required(ErrorMessage = "La vía es requerida")]
		public string ViaDomicilio { get; set; } = "1"; // Valor por defecto AVENIDA

		[Required(ErrorMessage = "La descripción de vía es requerida")]
		[StringLength(100, ErrorMessage = "La descripción de vía no puede exceder los 100 caracteres")]
		public string DescripcionVia { get; set; }

		[Required(ErrorMessage = "El departamento de domicilio es requerido")]
		public string DepartamentoDomicilio { get; set; } = "14"; // Valor por defecto LIMA

		[Required(ErrorMessage = "La provincia de domicilio es requerida")]
		public string ProvinciaDomicilio { get; set; }

		[Required(ErrorMessage = "El distrito de domicilio es requerido")]
		public string DistritoDomicilio { get; set; }

		[StringLength(10, ErrorMessage = "El teléfono no puede exceder los 10 caracteres")]
		[RegularExpression(@"^\d*$", ErrorMessage = "El teléfono debe contener solo dígitos")]
		public string Telefono { get; set; }

		[Required(ErrorMessage = "El celular es requerido")]
		[StringLength(10, ErrorMessage = "El celular no puede exceder los 10 caracteres")]
		[RegularExpression(@"^\d+$", ErrorMessage = "El celular debe contener solo dígitos")]
		public string Celular { get; set; }

		[Required(ErrorMessage = "El correo electrónico es requerido")]
		[EmailAddress(ErrorMessage = "Ingrese un correo electrónico válido")]
		[StringLength(100, ErrorMessage = "El correo no puede exceder los 100 caracteres")]
		public string Email { get; set; }

		// Datos de Universidad
		[Required(ErrorMessage = "El origen de universidad es requerido")]
		public string UniversidadOrigen { get; set; } = "1"; // Valor por defecto Nacional

		public string PaisUniversidad { get; set; }

		[Required(ErrorMessage = "La universidad es requerida")]
		public string Universidad { get; set; }

		[Required(ErrorMessage = "La fecha de emisión del título es requerida")]
		public DateTime FechaEmisionTitulo { get; set; } = DateTime.Today;

		public string TipoValidacion { get; set; } // Solo para extranjeras
		public string NumeroResolucion { get; set; } // Solo para extranjeras
		public string UniversidadPeruana { get; set; } // Solo para revalidación

		// Términos y condiciones
		[Range(typeof(bool), "true", "true", ErrorMessage = "Debe aceptar las políticas de privacidad")]
		public bool AceptaPoliticas { get; set; }

		[Required(ErrorMessage = "La foto del médico es requerida.")]
		public IBrowserFile FotoMedico { get; set; }
	}
}

