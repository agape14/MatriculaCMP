@page "/"
@layout LoginLayout
@using MatriculaCMP.Client.Layout
@using MatriculaCMP.Shared
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using System.IdentityModel.Tokens.Jwt
@using System.Text.Json
@inject HttpClient Http
@inject NavigationManager Nav
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthenticationStateProvider

<style>
    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
    }
</style>

<div class="login-container">
    <div class="row p-4">
        <div class="col-sm-2">
            <div class="form-group mb-3">
                <label for="numeroDocumento" class="mb-1">DNI</label>
                <input type="text"
                       id="numeroDocumento"
                       class="form-control"
                       @bind="NumeroDocumento"
                       maxlength="8"
                       placeholder="Ingrese su DNI" />
            </div>
        </div>
        <div class="col-sm-4">
            <button class="btn btn-danger  waves-effect waves-light mt-4" disabled="@loginSgdCargando" @onclick="IniciarSesion">
                @if (loginSgdCargando) { <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span> }
                INICIAR SESIÓN DESDE SGD
            </button>
        </div>
        <div class="col-sm-6">
            <button class="btn btn-primary  waves-effect waves-light mt-4" disabled="@irALoginCargando" @onclick="IniciarSesionUsuarioContraseña">
                @if (irALoginCargando) { <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span> }
                INICIAR CON USUARIO Y CONTRASEÑA
            </button>
        </div>
    </div>
    
</div>


@code {
    private string mensaje;
    // Valores por defecto 41342572
    private string TipoDocumento = "DNI";
    private string NumeroDocumento = "76777223";

    protected override async Task OnInitializedAsync()
    {
        Salir();
    }

    private async Task IniciarSesion()
    {
        try
        {
            loginSgdCargando = true;
            StateHasChanged();
            // Mostrar spinner mientras se procesa
            await JS.InvokeVoidAsync("mostrarSpinnerLogin", "Validando usuario...");
            string tipoEncriptado = await JS.InvokeAsync<string>("btoa", TipoDocumento);
            string numeroEncriptado = await JS.InvokeAsync<string>("btoa", NumeroDocumento);

            var dto = new UsuarioLoginEncryptedDTO
                {
                    TipoDocumentoEncrypted = tipoEncriptado,
                    NumeroDocumentoEncrypted = numeroEncriptado
                };

            var response = await Http.PostAsJsonAsync("api/usuario/LoginSgd", dto);
            await JS.InvokeVoidAsync("Swal.close");
            if (response.IsSuccessStatusCode)
            {
                //Nav.NavigateTo("/home");
                var json = await response.Content.ReadFromJsonAsync<JsonElement>();
                var token = json.GetProperty("token").GetString();

                // Redirigir manualmente a /autologin con el token
                Nav.NavigateTo($"/autologin?token={token}", forceLoad: true);
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                await JS.InvokeVoidAsync("Swal.fire", new
                {
                    icon = "error",
                    title = "Usuario no encontrado",
                    text = "Comuníquese con el administrador.",
                    confirmButtonText = "Aceptar"
                });
            }
            else
            {
                await JS.InvokeVoidAsync("Swal.fire", new
                {
                    icon = "error",
                    title = "Error al iniciar sesión",
                    text = $"Código: {(int)response.StatusCode}",
                    confirmButtonText = "Cerrar"
                });
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("Swal.close");
            await JS.InvokeVoidAsync("Swal.fire", new
            {
                icon = "error",
                title = "Error inesperado",
                text = ex.Message,
                confirmButtonText = "Cerrar"
            });
        }
        finally
        {
            loginSgdCargando = false;
            StateHasChanged();
        }
    }

    private async Task IniciarSesionUsuarioContraseña()
    {
        try
        {
            irALoginCargando = true;
            StateHasChanged();
            await Task.Delay(10);
            Nav.NavigateTo("/login");
        }
        finally
        {
            irALoginCargando = false;
        }
    }

    async Task Salir()
    {
        await JS.InvokeVoidAsync("localStorage.removeItem", "Token");
        await AuthenticationStateProvider.GetAuthenticationStateAsync();
    }
    private bool loginSgdCargando = false;
    private bool irALoginCargando = false;
}