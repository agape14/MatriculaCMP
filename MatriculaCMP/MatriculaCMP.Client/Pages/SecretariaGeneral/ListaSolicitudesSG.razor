@page "/secretariageneral/lista"
@using MatriculaCMP.Shared
@inject IJSRuntime JS
@inject HttpClient Http

<div class="container-fluid">
    <!-- start page title -->
    <div class="row">
        <div class="col-12">
            <div class="page-title-box d-sm-flex align-items-center justify-content-between">
                <h4 class="mb-sm-0">Secretaría General - Solicitudes</h4>

                <div class="page-title-right">
                    <ol class="breadcrumb m-0">
                        <li class="breadcrumb-item"><a href="javascript: void(0);">Inicio</a></li>
                        <li class="breadcrumb-item active">Listado Solicitudes</li>
                    </ol>
                </div>

            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-12">
            <div class="card">
                <div class="card-body  pt-0">
                    <div class="d-flex flex-wrap align-items-center gap-2 mb-3 px-2 px-sm-3">
                        <div class="form-check">
                            <input type="checkbox" id="chkTodos" class="form-check-input" checked="@seleccionarTodos" @onchange="SeleccionarTodasSolicitudes" />
                            <label class="form-check-label" for="chkTodos">Seleccionar todos</label>
                        </div>
                        <button class="btn btn-success" @onclick="AprobarSeleccionados">
                            <i class="ri-checkbox-circle-line align-middle me-2"></i> Validar seleccionados
                        </button>
                        <button class="btn btn-danger" @onclick="ObservarSeleccionados">
                            <i class="ri-close-circle-line align-middle me-2"></i> Observar seleccionados
                        </button>
                        <span class="text-muted small">Seleccionados: @seleccionados.Count</span>
                        <div class="ms-auto" style="min-width:260px;max-width:340px;">
                            <div class="input-group">
                                <span class="input-group-text"><i class="ri-search-2-line"></i></span>
                                <input class="form-control" placeholder="Buscar..." @oninput="OnSearchInput" />
                            </div>
                        </div>
                    </div>

                    <div class="table-responsive">
                        <table id="tblListadoSG" class="table table-hover align-middle datatable">
                            <thead class="thead-light">
                                <tr>
                                    <th style="width:42px">
                                        <input type="checkbox" class="form-check-input" checked="@seleccionarTodos" @onchange="SeleccionarTodasSolicitudes" />
                                    </th>
                                    <th class="d-none d-sm-table-cell">DNI</th>
                                    <th>Nombre</th>
                                    <th class="d-none d-md-table-cell">Fecha Nac.</th>
                                    <th class="d-none d-lg-table-cell">Lugar Nac.</th>
                                    <th>Estado</th>
                                    <th>Acciones</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var alumno in alumnos)
                                {
                                    <tr>
                                        <td>
                                            <input type="checkbox" class="form-check-input" checked="@seleccionados.Contains(alumno.Id)" @onchange="(()=>ToggleSeleccion(alumno.Id))" />
                                        </td>
                                        <td class="d-none d-sm-table-cell">@alumno.Numero</td>
                                        <td>@alumno.NombreCompleto</td>
                                        <td class="d-none d-md-table-cell">@alumno.FechaNacimiento</td>
                                        <td class="d-none d-lg-table-cell">@alumno.LugarNacimiento</td>
                                        <td>
                                            @if (alumno.Estado == "Registrado")
                                            {
                                                <div class="badge bg-info">Registrado</div>
                                            }
                                            else if (alumno.Estado == "Por Subsanar")
                                            {
                                                <div class="badge bg-warning">Por Subsanar</div>
                                            }
                                            else if (alumno.Estado == "Rechazado")
                                            {
                                                <div class="badge bg-danger">Rechazado</div>
                                            }
                                            else if (alumno.Estado == "Aprobado")
                                            {
                                                <div class="badge bg-success">Aprobado</div>
                                            }
                                        </td>
                                        <td class="text-nowrap">
                                            <button class="btn btn-sm btn-outline-info me-1" title="Ver PDF" @onclick="(async ()=> await VerPdfFirmado(alumno.Id))">
                                                <i class="ri-eye-fill"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <!-- Modal Loading -->
                    <div class="modal fade" id="loadingModal" tabindex="-1" aria-hidden="true">
                        <div class="modal-dialog modal-dialog-centered">
                            <div class="modal-content text-center p-4">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Cargando...</span>
                                </div>
                                <p class="mt-3">Procesando...</p>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>

</div>

@code {
    private bool seleccionarTodos = false;
    private HashSet<int> seleccionados = new();

    private List<ListadoPrematricula> alumnos = new()
    {
        new ListadoPrematricula {Id=1001,  Numero = "89451508", NombreCompleto = "Gerardo Mendez",     FechaNacimiento = "09/10/2021", LugarNacimiento = "Madre de Dios", Estado = "Aprobado" },
        new ListadoPrematricula {Id=1002, Numero = "89451510", NombreCompleto = "María Pérez",        FechaNacimiento = "11/02/1990", LugarNacimiento = "Lima",         Estado = "Registrado" },
    };

    private void SeleccionarTodasSolicitudes(ChangeEventArgs e)
    {
        seleccionarTodos = (bool)e.Value;
        seleccionados.Clear();
        if (seleccionarTodos)
        {
            foreach (var a in alumnos) seleccionados.Add(a.Id);
        }
    }

    private void ToggleSeleccion(int id)
    {
        if (seleccionados.Contains(id)) seleccionados.Remove(id); else seleccionados.Add(id);
    }

    private async Task OnSearchInput(ChangeEventArgs e)
    {
        var q = e?.Value?.ToString() ?? string.Empty;
        await JS.InvokeVoidAsync("inicializarDataTableFiltro", "#tblListadoSG", q);
    }

    private async Task AprobarSeleccionados()
    {
        if (!seleccionados.Any())
        {
            await JS.InvokeVoidAsync("Swal.fire", "Validación", "Seleccione al menos una solicitud", "warning");
            return;
        }
        var confirm = await JS.InvokeAsync<bool>("confirmarSweet", "¿Aprobar solicitudes seleccionadas?", $"Se aprobarán {seleccionados.Count} solicitudes.");
        if (!confirm) return;
        // TODO: Reemplazar por endpoint real de SG
        await JS.InvokeVoidAsync("Swal.fire", new { icon = "success", title = "Resultado", html = $"Aprobadas: {seleccionados.Count}" });
        seleccionados.Clear(); seleccionarTodos = false;
    }

    private async Task ObservarSeleccionados()
    {
        if (!seleccionados.Any())
        {
            await JS.InvokeVoidAsync("Swal.fire", "Observación", "Seleccione al menos una solicitud", "warning");
            return;
        }
        var obs = await JS.InvokeAsync<string>("solicitarObservacionUnica");
        if (string.IsNullOrWhiteSpace(obs)) return;
        // TODO: Reemplazar por endpoint real de SG
        await JS.InvokeVoidAsync("Swal.fire", new { icon = "success", title = "Resultado", html = $"Observadas: {seleccionados.Count}<br/>Obs: {obs}" });
        seleccionados.Clear(); seleccionarTodos = false;
    }

    private async Task VerPdfFirmado(int solicitudId)
    {
        var basePath = $"/firmas_digitales/documento_{solicitudId}";
        string? firmadoMasReciente = null;
        var candidatos = new[] { "[F][F][F][F]", "[F][F][F]", "[F][F]", "[F]", "_firmado" };
        foreach (var suf in candidatos)
        {
            var url = $"{basePath}{suf}.pdf";
            try
            {
                var resp = await Http.GetAsync(url);
                if (resp.IsSuccessStatusCode) { firmadoMasReciente = url; break; }
            }
            catch { }
        }
        if (!string.IsNullOrEmpty(firmadoMasReciente))
        {
            await JS.InvokeVoidAsync("open", firmadoMasReciente, "_blank");
        }
        else
        {
            await JS.InvokeVoidAsync("Swal.fire", new { icon = "info", title = "Sin PDF firmado", text = "Aún no existe un PDF firmado para esta solicitud." });
        }
    }
}

<script>
    window.inicializarDataTableFiltro = function (selector, q) {
        try { var t = $(selector).DataTable(); if (!t) return; t.search(q || '').draw(); } catch (e) { }
    }
    window.solicitarObservacionUnica = async function(){
        const { value: text } = await Swal.fire({
            title: 'Observación para las seleccionadas',
            input: 'text', inputLabel: 'Motivo', inputPlaceholder: 'Ingrese observación',
            inputValidator: (v)=> !v || v.trim()==='' ? 'Debe ingresar una observación' : null,
            showCancelButton: true, confirmButtonText: 'Aplicar a todas', cancelButtonText: 'Cancelar'
        });
        return text || '';
    }
</script>

