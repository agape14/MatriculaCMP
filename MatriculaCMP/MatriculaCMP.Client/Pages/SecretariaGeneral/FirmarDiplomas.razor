@page "/secretariageneral/firmar-diplomas"
@using MatriculaCMP.Shared
@using static MatriculaCMP.Shared.FirmaDigitalDTO
@using System.Text.Json;
@inject HttpClient Http
@inject IJSRuntime JS


<div class="container-fluid">
    @if (iniciandoFirma)
    {
        <div style="position:fixed;inset:0;background:rgba(0,0,0,0.55);z-index: 1000;display:flex;align-items:center;justify-content:center;color:#fff;">
            <div style="text-align:center">
                <div class="spinner-border text-light" role="status"></div>
                <div style="margin-top:12px;font-size:1.1rem;">Iniciando proceso de firma...<br/>Por favor espere hasta finalizar o cancelar.</div>
            </div>
        </div>
    }
    @if (mostrarPdf)
    {
        <div class="modal fade show" style="display:block;" tabindex="-1">
            <div class="modal-dialog modal-xl">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Vista previa del Diploma</h5>
                        <button type="button" class="btn-close" @onclick="CerrarModalPdf"></button>
                    </div>
                    <div class="modal-body" style="height:75vh;background-color:#f8f9fa;">
                        @if (!string.IsNullOrEmpty(pdfUrl))
                        {
                            <object data="@pdfUrl" type="application/pdf" width="100%" height="100%">
                                <embed src="@pdfUrl" type="application/pdf" width="100%" height="100%" />
                            </object>
                        }
                        else
                        {
                            <div class="text-center p-4">Cargando PDF...</div>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalPdf">Cerrar</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }

    <!-- Título -->
    <div class="row">
        <div class="col-12">
            <div class="page-title-box d-sm-flex align-items-center justify-content-between">
                <h4 class="mb-sm-0">Secretaría General - Firmar Diplomas</h4>
                <div class="page-title-right">
                    <ol class="breadcrumb m-0">
                        <li class="breadcrumb-item"><a href="javascript: void(0);">Inicio</a></li>
                        <li class="breadcrumb-item active">Firmar Diplomas</li>
                    </ol>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-12">
            <div class="card">
                <div class="card-body pt-0">
                    <div class="d-flex flex-wrap align-items-center mb-3 mt-2 gap-2">
                        <span class="badge bg-primary d-flex align-items-center">
                            <i class="ri-shield-star-line me-1"></i> Secretario General
                        </span>
                        <div class="form-check ms-2">
                            <input type="checkbox" id="chkTodos" class="form-check-input" checked="@seleccionarTodos" @onchange="SeleccionarTodasFilas" />
                            <label class="form-check-label" for="chkTodos">Seleccionar todos</label>
                        </div>
                        <button type="button" class="btn btn-primary d-flex align-items-center" @onclick="FirmarSeleccionados">
                            <i class="ri-fingerprint-fill align-middle me-2"></i> Firmar seleccionados
                        </button>
                        <div class="text-muted small ms-2">Seleccionados: @alumnos.Count(a=>a.Seleccionado)</div>
                        <div class="ms-auto" style="min-width:260px;max-width:340px;">
                            <div class="input-group">
                                <span class="input-group-text"><i class="ri-search-2-line"></i></span>
                                <input class="form-control" placeholder="Buscar DNI, nombre o N° solicitud" @bind="Filtro" @bind:event="oninput" />
                            </div>
                        </div>
                    </div>

                    <div class="table-responsive">
                        <table class="table table-hover align-middle mb-0">
                            <thead class="thead-light">
                                <tr>
                                    <th style="width:42px">
                                        <input type="checkbox" class="form-check-input" checked="@seleccionarTodos" @onchange="SeleccionarTodasFilas" />
                                    </th>
                                    <th>N° Solicitud</th>
                                    <th class="d-none d-sm-table-cell">Fecha Solicitud</th>
                                    <th>Estado</th>
                                    <th class="d-none d-md-table-cell">DNI</th>
                                    <th>Nombre</th>
                                    <th class="d-none d-lg-table-cell">N° Colegiatura</th>
                                    <th class="d-none d-md-table-cell">Fecha Emisión</th>
                                    <th>Acciones</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (!alumnos.Any())
                                {
                                    <tr>
                                        <td colspan="9" class="text-center text-muted py-4">No hay registros pendientes de firma.</td>
                                    </tr>
                                }
                                else
                                {
                                    @foreach (var alumno in alumnos)
                                    {
                                        <tr>
                                            <td>
                                                <input type="checkbox" class="form-check-input" @bind="alumno.Seleccionado" />
                                            </td>
                                            <td>@alumno.NumeroSolicitud</td>
                                            <td class="d-none d-sm-table-cell">@alumno.FechaSolicitud.ToString("dd/MM/yyyy")</td>
                                            <td><span class="badge bg-info">@alumno.EstadoNombre</span></td>
                                            <td class="d-none d-md-table-cell">@alumno.NumeroDocumento</td>
                                            <td>@alumno.NombreCompleto</td>
                                            <td class="d-none d-lg-table-cell">@alumno.NumeroColegiatura</td>
                                            <td class="d-none d-md-table-cell">@alumno.DiplomaFechaEmision.ToString("dd/MM/yyyy")</td>
                                            <td class="text-nowrap">
                                                <button class="btn btn-sm btn-outline-info me-1" title="Ver Diploma" @onclick="(async ()=> await VerDiploma(alumno.SolicitudId, true))">
                                                    <i class="ri-eye-fill"></i>
                                                </button>
                                                <button class="btn btn-sm btn-outline-primary" title="Firma individual" @onclick="(async ()=> await IniciarFirmaIndividual(alumno.SolicitudId))">
                                                    <i class="ri-quill-pen-line"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<center>
    <form type="post" id="ssoForm" name="ssoForm" target="iframeFirma" action="https://firmadorsignnet.cmp.org.pe:8443/SignnetSignature/Servicio" accept-charset="ISO-8859-1" style="display:none">
        <h1>Prueba de Firma Digital</h1>
        <table>
            <tr>
                <td>Codigo de Firma:</td>
                <td>
                    <input type="text" id="codigoFirma" name="codigoFirma" value="13052" size="40">
                </td>
            </tr>
        </table>
        <br />
        <input type="button" class="btn btn-primary" style="width: 100px !important" id="btnFirma" name="btnFirma" value="Firma">
        <br /><br />
    </form>
    <!-- Modal de Bootstrap -->
    <div id="dvIframe" class="modal fade">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-body">
                    <iframe frameborder="0" name="iframeFirma" id="iframeFirma" width="550px" height="320px"></iframe>
                </div>
            </div>
        </div>
    </div>
</center>
<script>
    let componenteRazor;
    window.registrarInstanciaDotNet = function (instancia) {
        componenteRazor = instancia;
    };
    window.mostrarFormularioFirma = function (codigoFirma) {
        document.getElementById("codigoFirma").value = codigoFirma;
        $('#dvIframe').modal({ backdrop: 'static', keyboard: false, show: true });
        document.getElementById("ssoForm").submit();
    }
    window.obtenerCodigoFirmaDesdeFormulario = function () {
        return document.getElementById("codigoFirma").value;
    };

    // Escucha del mensaje desde el iframe (respuesta de SignNet)
    window.addEventListener("message", function (e) {
        try {
            var rptJSON = JSON.parse(e.data);
            console.log("Respuesta recibida:", rptJSON);
            console.log("Respuesta recibida codigoFirma:", rptJSON.resultado);
            $('#dvIframe').modal('hide');

            if (componenteRazor && rptJSON.resultado === "0") {
                componenteRazor.invokeMethodAsync('SubirDocumentoFirmado', JSON.stringify(rptJSON))
                    .then(() => console.log("Método C# invocado con éxito"))
                    .catch(err => console.error("Error al invocar método C#", err));
            } else {
                console.warn("Firma fallida o instancia no disponible");
                if (componenteRazor) {
                    componenteRazor.invokeMethodAsync('OnFirmaCancelada', 'La firma fue cancelada por el usuario.')
                        .catch(err => console.error('Error al invocar OnFirmaCancelada', err));
                }
            }
        } catch (ex) {
            console.error("Error en respuesta del iframe", e.data);
        }
    });
</script>

@code {
    private bool mostrarPdf = false;
    private string? pdfUrl;
    private bool seleccionarTodos = false;
    private List<ItemFirma> paraFirma = new();

    private List<ItemFirmaView> alumnos = new();
    private List<ItemFirmaView> alumnosMaster = new();
    private string filtro = string.Empty;
    private string Filtro
    {
        get => filtro;
        set
        {
            filtro = value ?? string.Empty;
            AplicarFiltro();
        }
    }
    private bool iniciandoFirma = false;
    private int? firmaActualSolicitudId = null;
    private DotNetObjectReference<FirmarDiplomas>? dotNetRef;

    protected override async Task OnInitializedAsync()
    {
        await CargarParaFirma();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("registrarInstanciaDotNet", dotNetRef);
        }
    }

    private void SeleccionarTodasFilas(ChangeEventArgs e)
    {
        seleccionarTodos = (bool)e.Value;
        foreach (var alumno in alumnos)
        {
            alumno.Seleccionado = seleccionarTodos;
        }
    }

    private void AplicarFiltro()
    {
        if (string.IsNullOrWhiteSpace(filtro))
        {
            alumnos = alumnosMaster.ToList();
            return;
        }
        var f = filtro.Trim().ToLowerInvariant();
        alumnos = alumnosMaster.Where(a =>
            a.NumeroSolicitud.ToString().Contains(f)
            || (!string.IsNullOrEmpty(a.NumeroDocumento) && a.NumeroDocumento.ToLower().Contains(f))
            || (!string.IsNullOrEmpty(a.NombreCompleto) && a.NombreCompleto.ToLower().Contains(f))
            || (!string.IsNullOrEmpty(a.NumeroColegiatura) && a.NumeroColegiatura.ToLower().Contains(f))
        ).ToList();
    }

    private async Task VerDiploma(int solicitudId, bool mostrarEnModal = false)
    {
        try
        {
            // Intentar mostrar siempre la versión más firmada [F][F]... si existe
            var basePath = $"/firmas_digitales/documento_{solicitudId}";
            string? firmadoMasReciente = null;
            var candidatos = new[] { "[F][F][F][F]", "[F][F][F]", "[F][F]", "[F]", "_firmado" };
            foreach (var suf in candidatos)
            {
                var url = $"{basePath}{suf}.pdf";
                var resp = await Http.GetAsync(url);
                if (resp.IsSuccessStatusCode)
                {
                    firmadoMasReciente = url;
                    break;
                }
            }
            if (!string.IsNullOrEmpty(firmadoMasReciente))
            {
                if (mostrarEnModal)
                {
                    pdfUrl = firmadoMasReciente;
                    mostrarPdf = true;
                    StateHasChanged();
                }
                else
                {
                    await JS.InvokeVoidAsync("open", firmadoMasReciente, "_blank");
                }
                return;
            }

            // Si no hay firmado, preparar el PDF de trabajo
            var prep = await Http.PostAsync($"api/diploma/preparar-firma/{solicitudId}", null);
            if (!prep.IsSuccessStatusCode)
            {
                var txt = await prep.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("Swal.fire", new { icon = "error", title = "Error", text = txt });
                return;
            }
            var json = await prep.Content.ReadFromJsonAsync<RespPrep>();
            if (mostrarEnModal)
            {
                pdfUrl = json?.url;
                mostrarPdf = true;
                StateHasChanged();
            }
            else
            {
                await JS.InvokeVoidAsync("open", json?.url, "_blank");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("Swal.fire", new { icon = "error", title = "Error", text = ex.Message });
        }
    }

    private void CerrarModalPdf()
    {
        mostrarPdf = false;
        pdfUrl = null;
        StateHasChanged();
    }

    private async Task IniciarFirmaIndividual(int solicitudId)
    {
        try
        {
            iniciandoFirma = true;
            StateHasChanged();
            var preparar = await Http.PostAsync($"api/diploma/preparar-firma/{solicitudId}", null);
            if (!preparar.IsSuccessStatusCode)
            {
                var errPrep = await preparar.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("Swal.fire", new { icon = "error", title = "No se pudo preparar el PDF para firma", html = errPrep });
                iniciandoFirma = false;
                StateHasChanged();
                return;
            }

            var firmaRequest = new { IdExpedienteDocumento = solicitudId, IdExpedienteDocumentoFirmante = 0, TipoDocumentoFirmado = 3 };
            var resp1 = await Http.PostAsJsonAsync("api/firmadigital/firmar", firmaRequest);
            if (!resp1.IsSuccessStatusCode)
            {
                var err = await resp1.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("Swal.fire", new { icon = "error", title = "Error al iniciar firma", html = err });
                iniciandoFirma = false;
                StateHasChanged();
                return;
            }
            var up = await resp1.Content.ReadFromJsonAsync<UploadResponse>();
            if (up?.codigoFirma <= 0)
            {
                await JS.InvokeVoidAsync("Swal.fire", new { icon = "error", title = "Firma", text = up?.descripcion ?? "Sin código de firma" });
                iniciandoFirma = false;
                StateHasChanged();
                return;
            }

            await JS.InvokeVoidAsync("mostrarFormularioFirma", up.codigoFirma);
            firmaActualSolicitudId = solicitudId;
            // mantener overlay hasta finalizar/cancelar
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("Swal.fire", new { icon = "error", title = "Error", text = ex.Message });
            iniciandoFirma = false;
            StateHasChanged();
        }
    }

    private async Task FirmarSeleccionados()
    {
        var seleccionados = alumnos.Where(a => a.Seleccionado).Select(a => a.SolicitudId).ToList();
        if (!seleccionados.Any())
        {
            await JS.InvokeVoidAsync("Swal.fire", new { icon = "warning", title = "Seleccione al menos un registro" });
            return;
        }
        try
        {
            iniciandoFirma = true;
            StateHasChanged();

            var fallidos = new List<int>();
            foreach (var id in seleccionados)
            {
                var prep = await Http.PostAsync($"api/diploma/preparar-firma/{id}", null);
                if (!prep.IsSuccessStatusCode) fallidos.Add(id);
            }
            if (fallidos.Any())
            {
                await JS.InvokeVoidAsync("Swal.fire", new { icon = "error", title = "No se pudo preparar algunos PDFs", html = $"IDs: {string.Join(", ", fallidos)}" });
                iniciandoFirma = false;
                StateHasChanged();
                return;
            }

            var dto = new { Ids = seleccionados, TipoDocumentoFirmado = 3 };
            var resp = await Http.PostAsJsonAsync("api/firmadigital-lote/firmar", dto);
            if (!resp.IsSuccessStatusCode)
            {
                var err = await resp.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("Swal.fire", new { icon = "error", title = "Error al iniciar firma en lote", html = err });
                iniciandoFirma = false;
                StateHasChanged();
                return;
            }
            var up = await resp.Content.ReadFromJsonAsync<UploadResponse>();
            if (up?.codigoFirma <= 0)
            {
                await JS.InvokeVoidAsync("Swal.fire", new { icon = "error", title = "Firma Lote", text = up?.descripcion ?? "Sin código de firma" });
                iniciandoFirma = false;
                StateHasChanged();
                return;
            }
            await JS.InvokeVoidAsync("mostrarFormularioFirma", up.codigoFirma);
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("Swal.fire", new { icon = "error", title = "Error", text = ex.Message });
            iniciandoFirma = false;
            StateHasChanged();
        }
    }

    private async Task CargarParaFirma()
    {
        try
        {
            paraFirma = await Http.GetFromJsonAsync<List<ItemFirma>>("api/diploma/sg-para-firma");
            alumnosMaster = paraFirma.Select(x => new ItemFirmaView
            {
                SolicitudId = x.SolicitudId,
                NumeroSolicitud = x.NumeroSolicitud,
                FechaSolicitud = x.FechaSolicitud,
                EstadoId = x.EstadoId,
                EstadoNombre = x.EstadoNombre,
                NumeroDocumento = x.NumeroDocumento,
                NombreCompleto = x.NombreCompleto,
                NumeroColegiatura = x.NumeroColegiatura,
                DiplomaFechaEmision = x.DiplomaFechaEmision
            }).ToList();
            AplicarFiltro();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", new { tag = "CargarParaFirmaSG", error = ex.Message });
        }
    }

    [JSInvokable]
    public async Task SubirDocumentoFirmado(string rptJsonStr)
    {
        try
        {
            string codigoFirma = await JS.InvokeAsync<string>("obtenerCodigoFirmaDesdeFormulario");
            if (string.IsNullOrWhiteSpace(codigoFirma) || !int.TryParse(codigoFirma, out var codigo))
            {
                await JS.InvokeVoidAsync("Swal.fire", new { icon = "error", title = "Código de firma inválido" });
                return;
            }

            var seleccionados = alumnos.Where(a => a.Seleccionado).Select(a => a.SolicitudId).ToList();
            HttpResponseMessage responseUpload;
            if (seleccionados.Count > 1)
            {
                responseUpload = await Http.PostAsJsonAsync("api/firmadigital-lote/upload", new { CodigoFirma = codigo, TipoDocumentoFirmado = 3 });
            }
            else
            {
                var uploadRequest = new { IdExpedienteDocumento = firmaActualSolicitudId, IdExpedienteDocumentoFirmante = 0, CodigoFirma = codigo, TipoDocumentoFirmado = 3 };
                responseUpload = await Http.PostAsJsonAsync("api/firmadigital/upload", uploadRequest);
            }
            if (responseUpload.IsSuccessStatusCode)
            {
                var resultadoUpload = await responseUpload.Content.ReadFromJsonAsync<DownloadResponse>();
                await JS.InvokeVoidAsync("Swal.fire", new { icon = "success", title = resultadoUpload?.descripcion ?? "Documento firmado y registrado", showConfirmButton = true });
                await CargarParaFirma();
                iniciandoFirma = false;
                StateHasChanged();
            }
            else
            {
                var error = await responseUpload.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("Swal.fire", new { icon = "error", title = "Error al subir documento firmado", html = error });
                iniciandoFirma = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("Swal.fire", new { icon = "error", title = "Error inesperado", text = ex.Message });
            iniciandoFirma = false;
            StateHasChanged();
        }
    }

    [JSInvokable]
    public async Task OnFirmaCancelada(string mensaje)
    {
        await JS.InvokeVoidAsync("Swal.fire", new { icon = "info", title = "Firma cancelada", html = mensaje, showConfirmButton = true });
        iniciandoFirma = false;
        StateHasChanged();
    }

    public class RespPrep { public bool success { get; set; } public string url { get; set; } }

    public class ItemFirma
    {
        public int SolicitudId { get; set; }
        public int NumeroSolicitud { get; set; }
        public DateTime FechaSolicitud { get; set; }
        public int EstadoId { get; set; }
        public string EstadoNombre { get; set; }
        public int PersonaId { get; set; }
        public string NumeroDocumento { get; set; }
        public string NombreCompleto { get; set; }
        public string NumeroColegiatura { get; set; }
        public DateTime DiplomaFechaEmision { get; set; }
        public string RutaPdf { get; set; }
    }

    public class ItemFirmaView
    {
        public int SolicitudId { get; set; }
        public int NumeroSolicitud { get; set; }
        public DateTime FechaSolicitud { get; set; }
        public int EstadoId { get; set; }
        public string EstadoNombre { get; set; }
        public string NumeroDocumento { get; set; }
        public string NombreCompleto { get; set; }
        public string NumeroColegiatura { get; set; }
        public DateTime DiplomaFechaEmision { get; set; }
        public bool Seleccionado { get; set; }
    }
}

